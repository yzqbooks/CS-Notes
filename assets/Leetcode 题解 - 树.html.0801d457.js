import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as l,a as n,b as e,F as i,e as t,d as s}from"./app.5ce5af5d.js";const u={},r=t('<h1 id="leetcode-\u9898\u89E3-\u6811" tabindex="-1"><a class="header-anchor" href="#leetcode-\u9898\u89E3-\u6811" aria-hidden="true">#</a> Leetcode \u9898\u89E3 - \u6811</h1><ul><li><a href="#leetcode-%E9%A2%98%E8%A7%A3---%E6%A0%91">Leetcode \u9898\u89E3 - \u6811</a><ul><li><a href="#%E9%80%92%E5%BD%92">\u9012\u5F52</a><ul><li><a href="#1-%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6">1. \u6811\u7684\u9AD8\u5EA6</a></li><li><a href="#2-%E5%B9%B3%E8%A1%A1%E6%A0%91">2. \u5E73\u8861\u6811</a></li><li><a href="#3-%E4%B8%A4%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84">3. \u4E24\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84</a></li><li><a href="#4-%E7%BF%BB%E8%BD%AC%E6%A0%91">4. \u7FFB\u8F6C\u6811</a></li><li><a href="#5-%E5%BD%92%E5%B9%B6%E4%B8%A4%E6%A3%B5%E6%A0%91">5. \u5F52\u5E76\u4E24\u68F5\u6811</a></li><li><a href="#6-%E5%88%A4%E6%96%AD%E8%B7%AF%E5%BE%84%E5%92%8C%E6%98%AF%E5%90%A6%E7%AD%89%E4%BA%8E%E4%B8%80%E4%B8%AA%E6%95%B0">6. \u5224\u65AD\u8DEF\u5F84\u548C\u662F\u5426\u7B49\u4E8E\u4E00\u4E2A\u6570</a></li><li><a href="#7-%E7%BB%9F%E8%AE%A1%E8%B7%AF%E5%BE%84%E5%92%8C%E7%AD%89%E4%BA%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0%E9%87%8F">7. \u7EDF\u8BA1\u8DEF\u5F84\u548C\u7B49\u4E8E\u4E00\u4E2A\u6570\u7684\u8DEF\u5F84\u6570\u91CF</a></li><li><a href="#8-%E5%AD%90%E6%A0%91">8. \u5B50\u6811</a></li><li><a href="#9-%E6%A0%91%E7%9A%84%E5%AF%B9%E7%A7%B0">9. \u6811\u7684\u5BF9\u79F0</a></li><li><a href="#10-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84">10. \u6700\u5C0F\u8DEF\u5F84</a></li><li><a href="#11-%E7%BB%9F%E8%AE%A1%E5%B7%A6%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C">11. \u7EDF\u8BA1\u5DE6\u53F6\u5B50\u8282\u70B9\u7684\u548C</a></li><li><a href="#12-%E7%9B%B8%E5%90%8C%E8%8A%82%E7%82%B9%E5%80%BC%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6">12. \u76F8\u540C\u8282\u70B9\u503C\u7684\u6700\u5927\u8DEF\u5F84\u957F\u5EA6</a></li><li><a href="#13-%E9%97%B4%E9%9A%94%E9%81%8D%E5%8E%86">13. \u95F4\u9694\u904D\u5386</a></li><li><a href="#14-%E6%89%BE%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9">14. \u627E\u51FA\u4E8C\u53C9\u6811\u4E2D\u7B2C\u4E8C\u5C0F\u7684\u8282\u70B9</a></li></ul></li><li><a href="#%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86">\u5C42\u6B21\u904D\u5386</a><ul><li><a href="#1-%E4%B8%80%E6%A3%B5%E6%A0%91%E6%AF%8F%E5%B1%82%E8%8A%82%E7%82%B9%E7%9A%84%E5%B9%B3%E5%9D%87%E6%95%B0">1. \u4E00\u68F5\u6811\u6BCF\u5C42\u8282\u70B9\u7684\u5E73\u5747\u6570</a></li><li><a href="#2-%E5%BE%97%E5%88%B0%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E8%8A%82%E7%82%B9">2. \u5F97\u5230\u5DE6\u4E0B\u89D2\u7684\u8282\u70B9</a></li></ul></li><li><a href="#%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">\u524D\u4E2D\u540E\u5E8F\u904D\u5386</a><ul><li><a href="#1-%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86">1. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386</a></li><li><a href="#2-%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">2. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386</a></li><li><a href="#3-%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86">3. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386</a></li></ul></li><li><a href="#bst">BST</a><ul><li><a href="#1-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">1. \u4FEE\u526A\u4E8C\u53C9\u67E5\u627E\u6811</a></li><li><a href="#2-%E5%AF%BB%E6%89%BE%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E7%AC%AC-k-%E4%B8%AA%E5%85%83%E7%B4%A0">2. \u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u7B2C k \u4E2A\u5143\u7D20</a></li><li><a href="#3-%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%E9%83%BD%E5%8A%A0%E4%B8%8A%E6%AF%94%E5%AE%83%E5%A4%A7%E7%9A%84%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC">3. \u628A\u4E8C\u53C9\u67E5\u627E\u6811\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\u90FD\u52A0\u4E0A\u6BD4\u5B83\u5927\u7684\u8282\u70B9\u7684\u503C</a></li><li><a href="#4-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88">4. \u4E8C\u53C9\u67E5\u627E\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</a></li><li><a href="#5-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88">5. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</a></li><li><a href="#6-%E4%BB%8E%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">6. \u4ECE\u6709\u5E8F\u6570\u7EC4\u4E2D\u6784\u9020\u4E8C\u53C9\u67E5\u627E\u6811</a></li><li><a href="#7-%E6%A0%B9%E6%8D%AE%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E6%9E%84%E9%80%A0%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">7. \u6839\u636E\u6709\u5E8F\u94FE\u8868\u6784\u9020\u5E73\u8861\u7684\u4E8C\u53C9\u67E5\u627E\u6811</a></li><li><a href="#8-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8C%E4%BD%BF%E5%AE%83%E4%BB%AC%E7%9A%84%E5%92%8C%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%BB%99%E5%AE%9A%E5%80%BC">8. \u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u5BFB\u627E\u4E24\u4E2A\u8282\u70B9\uFF0C\u4F7F\u5B83\u4EEC\u7684\u548C\u4E3A\u4E00\u4E2A\u7ED9\u5B9A\u503C</a></li><li><a href="#9-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%AD%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B9%8B%E5%B7%AE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%80%BC">9. \u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u67E5\u627E\u4E24\u4E2A\u8282\u70B9\u4E4B\u5DEE\u7684\u6700\u5C0F\u7EDD\u5BF9\u503C</a></li><li><a href="#10-%E5%AF%BB%E6%89%BE%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%80%BC">10. \u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u51FA\u73B0\u6B21\u6570\u6700\u591A\u7684\u503C</a></li></ul></li><li><a href="#trie">Trie</a><ul><li><a href="#1-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie">1. \u5B9E\u73B0\u4E00\u4E2A Trie</a></li><li><a href="#2-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%B1%82%E5%89%8D%E7%BC%80%E5%92%8C">2. \u5B9E\u73B0\u4E00\u4E2A Trie\uFF0C\u7528\u6765\u6C42\u524D\u7F00\u548C</a></li></ul></li></ul></li></ul><h2 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h2><p>\u4E00\u68F5\u6811\u8981\u4E48\u662F\u7A7A\u6811\uFF0C\u8981\u4E48\u6709\u4E24\u4E2A\u6307\u9488\uFF0C\u6BCF\u4E2A\u6307\u9488\u6307\u5411\u4E00\u68F5\u6811\u3002\u6811\u662F\u4E00\u79CD\u9012\u5F52\u7ED3\u6784\uFF0C\u5F88\u591A\u6811\u7684\u95EE\u9898\u53EF\u4EE5\u4F7F\u7528\u9012\u5F52\u6765\u5904\u7406\u3002</p><h3 id="_1-\u6811\u7684\u9AD8\u5EA6" tabindex="-1"><a class="header-anchor" href="#_1-\u6811\u7684\u9AD8\u5EA6" aria-hidden="true">#</a> 1. \u6811\u7684\u9AD8\u5EA6</h3><p>104. Maximum Depth of Binary Tree (Easy)</p>',6),k={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},d=s("Leetcode"),v=s(" / "),m={href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},b=s("\u529B\u6263"),h=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u5E73\u8861\u6811" tabindex="-1"><a class="header-anchor" href="#_2-\u5E73\u8861\u6811" aria-hidden="true">#</a> 2. \u5E73\u8861\u6811</h3><p>110. Balanced Binary Tree (Easy)</p>`,3),f={href:"https://leetcode.com/problems/balanced-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},y=s("Leetcode"),w=s(" / "),_={href:"https://leetcode-cn.com/problems/balanced-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},g=s("\u529B\u6263"),E=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>    3
   / \\
  9  20
    /  \\
   15   7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5E73\u8861\u6811\u5DE6\u53F3\u5B50\u6811\u9AD8\u5EA6\u5DEE\u90FD\u5C0F\u4E8E\u7B49\u4E8E 1</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>l <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u4E24\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84" tabindex="-1"><a class="header-anchor" href="#_3-\u4E24\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84" aria-hidden="true">#</a> 3. \u4E24\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84</h3><p>543. Diameter of Binary Tree (Easy)</p>`,5),A={href:"https://leetcode.com/problems/diameter-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},B=s("Leetcode"),x=s(" / "),T={href:"https://leetcode-cn.com/problems/diameter-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},N=s("\u529B\u6263"),j=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:

         1
        / \\
       2  3
      / \\
     4   5

Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> leftDepth <span class="token operator">+</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-\u7FFB\u8F6C\u6811" tabindex="-1"><a class="header-anchor" href="#_4-\u7FFB\u8F6C\u6811" aria-hidden="true">#</a> 4. \u7FFB\u8F6C\u6811</h3><p>226. Invert Binary Tree (Easy)</p>`,4),L={href:"https://leetcode.com/problems/invert-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},C=s("Leetcode"),S=s(" / "),F={href:"https://leetcode-cn.com/problems/invert-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},D=s("\u529B\u6263"),I=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token comment">// \u540E\u9762\u7684\u64CD\u4F5C\u4F1A\u6539\u53D8 left \u6307\u9488\uFF0C\u56E0\u6B64\u5148\u4FDD\u5B58\u4E0B\u6765</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-\u5F52\u5E76\u4E24\u68F5\u6811" tabindex="-1"><a class="header-anchor" href="#_5-\u5F52\u5E76\u4E24\u68F5\u6811" aria-hidden="true">#</a> 5. \u5F52\u5E76\u4E24\u68F5\u6811</h3><p>617. Merge Two Binary Trees (Easy)</p>`,3),M={href:"https://leetcode.com/problems/merge-two-binary-trees/description/",target:"_blank",rel:"noopener noreferrer"},O=s("Leetcode"),q=s(" / "),V={href:"https://leetcode-cn.com/problems/merge-two-binary-trees/description/",target:"_blank",rel:"noopener noreferrer"},R=s("\u529B\u6263"),P=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
       Tree 1                     Tree 2
          1                         2
         / \\                       / \\
        3   2                     1   3
       /                           \\   \\
      5                             4   7

Output:
         3
        / \\
       4   5
      / \\   \\
     5   4   7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> t1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t2<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t1<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">+</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-\u5224\u65AD\u8DEF\u5F84\u548C\u662F\u5426\u7B49\u4E8E\u4E00\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_6-\u5224\u65AD\u8DEF\u5F84\u548C\u662F\u5426\u7B49\u4E8E\u4E00\u4E2A\u6570" aria-hidden="true">#</a> 6. \u5224\u65AD\u8DEF\u5F84\u548C\u662F\u5426\u7B49\u4E8E\u4E00\u4E2A\u6570</h3><p>Leetcdoe : 112. Path Sum (Easy)</p>`,4),W={href:"https://leetcode.com/problems/path-sum/description/",target:"_blank",rel:"noopener noreferrer"},G=s("Leetcode"),z=s(" / "),U={href:"https://leetcode-cn.com/problems/path-sum/description/",target:"_blank",rel:"noopener noreferrer"},H=s("\u529B\u6263"),K=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given the below binary tree and sum = 22,

              5
             / \\
            4   8
           /   / \\
          11  13  4
         /  \\      \\
        7    2      1

return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8DEF\u5F84\u548C\u5B9A\u4E49\u4E3A\u4ECE root \u5230 leaf \u7684\u6240\u6709\u8282\u70B9\u7684\u548C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-\u7EDF\u8BA1\u8DEF\u5F84\u548C\u7B49\u4E8E\u4E00\u4E2A\u6570\u7684\u8DEF\u5F84\u6570\u91CF" tabindex="-1"><a class="header-anchor" href="#_7-\u7EDF\u8BA1\u8DEF\u5F84\u548C\u7B49\u4E8E\u4E00\u4E2A\u6570\u7684\u8DEF\u5F84\u6570\u91CF" aria-hidden="true">#</a> 7. \u7EDF\u8BA1\u8DEF\u5F84\u548C\u7B49\u4E8E\u4E00\u4E2A\u6570\u7684\u8DEF\u5F84\u6570\u91CF</h3><p>437. Path Sum III (Easy)</p>`,5),Q={href:"https://leetcode.com/problems/path-sum-iii/description/",target:"_blank",rel:"noopener noreferrer"},X=s("Leetcode"),J=s(" / "),Y={href:"https://leetcode-cn.com/problems/path-sum-iii/description/",target:"_blank",rel:"noopener noreferrer"},Z=s("\u529B\u6263"),$=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \\
    5   -3
   / \\    \\
  3   2   11
 / \\   \\
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -&gt; 3
2.  5 -&gt; 2 -&gt; 1
3. -3 -&gt; 11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8DEF\u5F84\u4E0D\u4E00\u5B9A\u4EE5 root \u5F00\u5934\uFF0C\u4E5F\u4E0D\u4E00\u5B9A\u4EE5 leaf \u7ED3\u5C3E\uFF0C\u4F46\u662F\u5FC5\u987B\u8FDE\u7EED\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pathSumStartWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">pathSumStartWithRoot</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> sum<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>
    ret <span class="token operator">+=</span> <span class="token function">pathSumStartWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pathSumStartWithRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-\u5B50\u6811" tabindex="-1"><a class="header-anchor" href="#_8-\u5B50\u6811" aria-hidden="true">#</a> 8. \u5B50\u6811</h3><p>572. Subtree of Another Tree (Easy)</p>`,5),nn={href:"https://leetcode.com/problems/subtree-of-another-tree/description/",target:"_blank",rel:"noopener noreferrer"},sn=s("Leetcode"),an=s(" / "),en={href:"https://leetcode-cn.com/problems/subtree-of-another-tree/description/",target:"_blank",rel:"noopener noreferrer"},tn=s("\u529B\u6263"),pn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given tree s:
     3
    / \\
   4   5
  / \\
 1   2

Given tree t:
   4
  / \\
 1   2

Return true, because t has the same structure and node values with a subtree of s.

Given tree s:

     3
    / \\
   4   5
  / \\
 1   2
    /
   0

Given tree t:
   4
  / \\
 1   2

Return false.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> s<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> s<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>val <span class="token operator">!=</span> s<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSubtreeWithRoot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-\u6811\u7684\u5BF9\u79F0" tabindex="-1"><a class="header-anchor" href="#_9-\u6811\u7684\u5BF9\u79F0" aria-hidden="true">#</a> 9. \u6811\u7684\u5BF9\u79F0</h3><p>101. Symmetric Tree (Easy)</p>`,4),on={href:"https://leetcode.com/problems/symmetric-tree/description/",target:"_blank",rel:"noopener noreferrer"},cn=s("Leetcode"),ln=s(" / "),un={href:"https://leetcode-cn.com/problems/symmetric-tree/description/",target:"_blank",rel:"noopener noreferrer"},rn=s("\u529B\u6263"),kn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>    1
   / \\
  2   2
 / \\ / \\
3  4 4  3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> t1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">!=</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-\u6700\u5C0F\u8DEF\u5F84" tabindex="-1"><a class="header-anchor" href="#_10-\u6700\u5C0F\u8DEF\u5F84" aria-hidden="true">#</a> 10. \u6700\u5C0F\u8DEF\u5F84</h3><p>111. Minimum Depth of Binary Tree (Easy)</p>`,4),dn={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},vn=s("Leetcode"),mn=s(" / "),bn={href:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},hn=s("\u529B\u6263"),fn=t(`<p>\u6811\u7684\u6839\u8282\u70B9\u5230\u53F6\u5B50\u8282\u70B9\u7684\u6700\u5C0F\u8DEF\u5F84\u957F\u5EA6</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-\u7EDF\u8BA1\u5DE6\u53F6\u5B50\u8282\u70B9\u7684\u548C" tabindex="-1"><a class="header-anchor" href="#_11-\u7EDF\u8BA1\u5DE6\u53F6\u5B50\u8282\u70B9\u7684\u548C" aria-hidden="true">#</a> 11. \u7EDF\u8BA1\u5DE6\u53F6\u5B50\u8282\u70B9\u7684\u548C</h3><p>404. Sum of Left Leaves (Easy)</p>`,4),yn={href:"https://leetcode.com/problems/sum-of-left-leaves/description/",target:"_blank",rel:"noopener noreferrer"},wn=s("Leetcode"),_n=s(" / "),gn={href:"https://leetcode-cn.com/problems/sum-of-left-leaves/description/",target:"_blank",rel:"noopener noreferrer"},En=s("\u529B\u6263"),An=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>    3
   / \\
  9  20
    /  \\
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-\u76F8\u540C\u8282\u70B9\u503C\u7684\u6700\u5927\u8DEF\u5F84\u957F\u5EA6" tabindex="-1"><a class="header-anchor" href="#_12-\u76F8\u540C\u8282\u70B9\u503C\u7684\u6700\u5927\u8DEF\u5F84\u957F\u5EA6" aria-hidden="true">#</a> 12. \u76F8\u540C\u8282\u70B9\u503C\u7684\u6700\u5927\u8DEF\u5F84\u957F\u5EA6</h3><p>687. Longest Univalue Path (Easy)</p>`,4),Bn={href:"https://leetcode.com/problems/longest-univalue-path/",target:"_blank",rel:"noopener noreferrer"},xn=s("Leetcode"),Tn=s(" / "),Nn={href:"https://leetcode-cn.com/problems/longest-univalue-path/",target:"_blank",rel:"noopener noreferrer"},jn=s("\u529B\u6263"),Ln=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>             1
            / \\
           4   5
          / \\   \\
         4   4   5

Output : 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestUnivaluePath</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftPath <span class="token operator">=</span> root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> root<span class="token punctuation">.</span>val <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightPath <span class="token operator">=</span> root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">==</span> root<span class="token punctuation">.</span>val <span class="token operator">?</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    path <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> leftPath <span class="token operator">+</span> rightPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftPath<span class="token punctuation">,</span> rightPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-\u95F4\u9694\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#_13-\u95F4\u9694\u904D\u5386" aria-hidden="true">#</a> 13. \u95F4\u9694\u904D\u5386</h3><p>337. House Robber III (Medium)</p>`,4),Cn={href:"https://leetcode.com/problems/house-robber-iii/description/",target:"_blank",rel:"noopener noreferrer"},Sn=s("Leetcode"),Fn=s(" / "),Dn={href:"https://leetcode-cn.com/problems/house-robber-iii/description/",target:"_blank",rel:"noopener noreferrer"},In=s("\u529B\u6263"),Mn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>     3
    / \\
   2   3
    \\   \\
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> val1 <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> val1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> val1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> val2 <span class="token operator">=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-\u627E\u51FA\u4E8C\u53C9\u6811\u4E2D\u7B2C\u4E8C\u5C0F\u7684\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_14-\u627E\u51FA\u4E8C\u53C9\u6811\u4E2D\u7B2C\u4E8C\u5C0F\u7684\u8282\u70B9" aria-hidden="true">#</a> 14. \u627E\u51FA\u4E8C\u53C9\u6811\u4E2D\u7B2C\u4E8C\u5C0F\u7684\u8282\u70B9</h3><p>671. Second Minimum Node In a Binary Tree (Easy)</p>`,4),On={href:"https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},qn=s("Leetcode"),Vn=s(" / "),Rn={href:"https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},Pn=s("\u529B\u6263"),Wn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
   2
  / \\
 2   5
    / \\
    5  7

Output: 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E00\u4E2A\u8282\u70B9\u8981\u4E48\u5177\u6709 0 \u4E2A\u6216 2 \u4E2A\u5B50\u8282\u70B9\uFF0C\u5982\u679C\u6709\u5B50\u8282\u70B9\uFF0C\u90A3\u4E48\u6839\u8282\u70B9\u662F\u6700\u5C0F\u7684\u8282\u70B9\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findSecondMinimumValue</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftVal <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightVal <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVal <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> leftVal <span class="token operator">=</span> <span class="token function">findSecondMinimumValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightVal <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> rightVal <span class="token operator">=</span> <span class="token function">findSecondMinimumValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVal <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rightVal <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftVal<span class="token punctuation">,</span> rightVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVal <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> leftVal<span class="token punctuation">;</span>
    <span class="token keyword">return</span> rightVal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C42\u6B21\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u5C42\u6B21\u904D\u5386" aria-hidden="true">#</a> \u5C42\u6B21\u904D\u5386</h2><p>\u4F7F\u7528 BFS \u8FDB\u884C\u5C42\u6B21\u904D\u5386\u3002\u4E0D\u9700\u8981\u4F7F\u7528\u4E24\u4E2A\u961F\u5217\u6765\u5206\u522B\u5B58\u50A8\u5F53\u524D\u5C42\u7684\u8282\u70B9\u548C\u4E0B\u4E00\u5C42\u7684\u8282\u70B9\uFF0C\u56E0\u4E3A\u5728\u5F00\u59CB\u904D\u5386\u4E00\u5C42\u7684\u8282\u70B9\u65F6\uFF0C\u5F53\u524D\u961F\u5217\u4E2D\u7684\u8282\u70B9\u6570\u5C31\u662F\u5F53\u524D\u5C42\u7684\u8282\u70B9\u6570\uFF0C\u53EA\u8981\u63A7\u5236\u904D\u5386\u8FD9\u4E48\u591A\u8282\u70B9\u6570\uFF0C\u5C31\u80FD\u4FDD\u8BC1\u8FD9\u6B21\u904D\u5386\u7684\u90FD\u662F\u5F53\u524D\u5C42\u7684\u8282\u70B9\u3002</p><h3 id="_1-\u4E00\u68F5\u6811\u6BCF\u5C42\u8282\u70B9\u7684\u5E73\u5747\u6570" tabindex="-1"><a class="header-anchor" href="#_1-\u4E00\u68F5\u6811\u6BCF\u5C42\u8282\u70B9\u7684\u5E73\u5747\u6570" aria-hidden="true">#</a> 1. \u4E00\u68F5\u6811\u6BCF\u5C42\u8282\u70B9\u7684\u5E73\u5747\u6570</h3><p>637. Average of Levels in Binary Tree (Easy)</p>`,7),Gn={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},zn=s("Leetcode"),Un=s(" / "),Hn={href:"https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},Kn=s("\u529B\u6263"),Qn=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u5F97\u5230\u5DE6\u4E0B\u89D2\u7684\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_2-\u5F97\u5230\u5DE6\u4E0B\u89D2\u7684\u8282\u70B9" aria-hidden="true">#</a> 2. \u5F97\u5230\u5DE6\u4E0B\u89D2\u7684\u8282\u70B9</h3><p>513. Find Bottom Left Tree Value (Easy)</p>`,3),Xn={href:"https://leetcode.com/problems/find-bottom-left-tree-value/description/",target:"_blank",rel:"noopener noreferrer"},Jn=s("Leetcode"),Yn=s(" / "),Zn={href:"https://leetcode-cn.com/problems/find-bottom-left-tree-value/description/",target:"_blank",rel:"noopener noreferrer"},$n=s("\u529B\u6263"),ns=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:

        1
       / \\
      2   3
     /   / \\
    4   5   6
       /
      7

Output:
7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u524D\u4E2D\u540E\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u524D\u4E2D\u540E\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u524D\u4E2D\u540E\u5E8F\u904D\u5386</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>    1
   / \\
  2   3
 / \\   \\
4   5   6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u5C42\u6B21\u904D\u5386\u987A\u5E8F\uFF1A[1 2 3 4 5 6]</li><li>\u524D\u5E8F\u904D\u5386\u987A\u5E8F\uFF1A[1 2 4 5 3 6]</li><li>\u4E2D\u5E8F\u904D\u5386\u987A\u5E8F\uFF1A[4 2 5 1 3 6]</li><li>\u540E\u5E8F\u904D\u5386\u987A\u5E8F\uFF1A[4 5 2 6 3 1]</li></ul><p>\u5C42\u6B21\u904D\u5386\u4F7F\u7528 BFS \u5B9E\u73B0\uFF0C\u5229\u7528\u7684\u5C31\u662F BFS \u4E00\u5C42\u4E00\u5C42\u904D\u5386\u7684\u7279\u6027\uFF1B\u800C\u524D\u5E8F\u3001\u4E2D\u5E8F\u3001\u540E\u5E8F\u904D\u5386\u5229\u7528\u4E86 DFS \u5B9E\u73B0\u3002</p><p>\u524D\u5E8F\u3001\u4E2D\u5E8F\u3001\u540E\u5E8F\u904D\u53EA\u662F\u5728\u5BF9\u8282\u70B9\u8BBF\u95EE\u7684\u987A\u5E8F\u6709\u4E00\u70B9\u4E0D\u540C\uFF0C\u5176\u5B83\u90FD\u76F8\u540C\u3002</p><p>\u2460 \u524D\u5E8F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2461 \u4E2D\u5E8F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2462 \u540E\u5E8F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#_1-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386" aria-hidden="true">#</a> 1. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386</h3><p>144. Binary Tree Preorder Traversal (Medium)</p>`,15),ss={href:"https://leetcode.com/problems/binary-tree-preorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},as=s("Leetcode"),es=s(" / "),ts={href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},ps=s("\u529B\u6263"),os=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5148\u53F3\u540E\u5DE6\uFF0C\u4FDD\u8BC1\u5DE6\u5B50\u6811\u5148\u904D\u5386</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#_2-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386" aria-hidden="true">#</a> 2. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386</h3><p>145. Binary Tree Postorder Traversal (Medium)</p>`,3),cs={href:"https://leetcode.com/problems/binary-tree-postorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},ls=s("Leetcode"),is=s(" / "),us={href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},rs=s("\u529B\u6263"),ks=t(`<p>\u524D\u5E8F\u904D\u5386\u4E3A root -&gt; left -&gt; right\uFF0C\u540E\u5E8F\u904D\u5386\u4E3A left -&gt; right -&gt; root\u3002\u53EF\u4EE5\u4FEE\u6539\u524D\u5E8F\u904D\u5386\u6210\u4E3A root -&gt; right -&gt; left\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u987A\u5E8F\u5C31\u548C\u540E\u5E8F\u904D\u5386\u6B63\u597D\u76F8\u53CD\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#_3-\u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386" aria-hidden="true">#</a> 3. \u975E\u9012\u5F52\u5B9E\u73B0\u4E8C\u53C9\u6811\u7684\u4E2D\u5E8F\u904D\u5386</h3><p>94. Binary Tree Inorder Traversal (Medium)</p>`,4),ds={href:"https://leetcode.com/problems/binary-tree-inorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},vs=s("Leetcode"),ms=s(" / "),bs={href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/description/",target:"_blank",rel:"noopener noreferrer"},hs=s("\u529B\u6263"),fs=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bst" tabindex="-1"><a class="header-anchor" href="#bst" aria-hidden="true">#</a> BST</h2><p>\u4E8C\u53C9\u67E5\u627E\u6811\uFF08BST\uFF09\uFF1A\u6839\u8282\u70B9\u5927\u4E8E\u7B49\u4E8E\u5DE6\u5B50\u6811\u6240\u6709\u8282\u70B9\uFF0C\u5C0F\u4E8E\u7B49\u4E8E\u53F3\u5B50\u6811\u6240\u6709\u8282\u70B9\u3002</p><p>\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u5E8F\u904D\u5386\u6709\u5E8F\u3002</p><h3 id="_1-\u4FEE\u526A\u4E8C\u53C9\u67E5\u627E\u6811" tabindex="-1"><a class="header-anchor" href="#_1-\u4FEE\u526A\u4E8C\u53C9\u67E5\u627E\u6811" aria-hidden="true">#</a> 1. \u4FEE\u526A\u4E8C\u53C9\u67E5\u627E\u6811</h3><p>669. Trim a Binary Search Tree (Easy)</p>`,6),ys={href:"https://leetcode.com/problems/trim-a-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},ws=s("Leetcode"),_s=s(" / "),gs={href:"https://leetcode-cn.com/problems/trim-a-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},Es=s("\u529B\u6263"),As=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:

    3
   / \\
  0   4
   \\
    2
   /
  1

  L = 1
  R = 3

Output:

      3
     /
   2
  /
 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u53EA\u4FDD\u7559\u503C\u5728 L ~ R \u4E4B\u95F4\u7684\u8282\u70B9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">trimBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u7B2C-k-\u4E2A\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_2-\u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u7B2C-k-\u4E2A\u5143\u7D20" aria-hidden="true">#</a> 2. \u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u7B2C k \u4E2A\u5143\u7D20</h3><p>230. Kth Smallest Element in a BST (Medium)</p>`,5),Bs={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/",target:"_blank",rel:"noopener noreferrer"},xs=s("Leetcode"),Ts=s(" / "),Ns={href:"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/description/",target:"_blank",rel:"noopener noreferrer"},js=s("\u529B\u6263"),Ls=t(`<p>\u4E2D\u5E8F\u904D\u5386\u89E3\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9012\u5F52\u89E3\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> leftCnt <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftCnt <span class="token operator">==</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftCnt <span class="token operator">&gt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> leftCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u628A\u4E8C\u53C9\u67E5\u627E\u6811\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\u90FD\u52A0\u4E0A\u6BD4\u5B83\u5927\u7684\u8282\u70B9\u7684\u503C" tabindex="-1"><a class="header-anchor" href="#_3-\u628A\u4E8C\u53C9\u67E5\u627E\u6811\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\u90FD\u52A0\u4E0A\u6BD4\u5B83\u5927\u7684\u8282\u70B9\u7684\u503C" aria-hidden="true">#</a> 3. \u628A\u4E8C\u53C9\u67E5\u627E\u6811\u6BCF\u4E2A\u8282\u70B9\u7684\u503C\u90FD\u52A0\u4E0A\u6BD4\u5B83\u5927\u7684\u8282\u70B9\u7684\u503C</h3><p>Convert BST to Greater Tree (Easy)</p>`,6),Cs={href:"https://leetcode.com/problems/convert-bst-to-greater-tree/description/",target:"_blank",rel:"noopener noreferrer"},Ss=s("Leetcode"),Fs=s(" / "),Ds={href:"https://leetcode-cn.com/problems/convert-bst-to-greater-tree/description/",target:"_blank",rel:"noopener noreferrer"},Is=s("\u529B\u6263"),Ms=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: The root of a Binary Search Tree like this:

              5
            /   \\
           2     13

Output: The root of a Greater Tree like this:

             18
            /   \\
          20     13
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5148\u904D\u5386\u53F3\u5B50\u6811\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">traver</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">traver</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">traver</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token function">traver</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148" tabindex="-1"><a class="header-anchor" href="#_4-\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148" aria-hidden="true">#</a> 4. \u4E8C\u53C9\u67E5\u627E\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</h3><p>235. Lowest Common Ancestor of a Binary Search Tree (Easy)</p>`,5),Os={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},qs=s("Leetcode"),Vs=s(" / "),Rs={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},Ps=s("\u529B\u6263"),Ws=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>        _______6______
      /                \\
  ___2__             ___8__
 /      \\           /      \\
0        4         7        9
        /  \\
       3   5

For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148" tabindex="-1"><a class="header-anchor" href="#_5-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148" aria-hidden="true">#</a> 5. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148</h3><p>236. Lowest Common Ancestor of a Binary Tree (Medium)</p>`,4),Gs={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},zs=s("Leetcode"),Us=s(" / "),Hs={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/description/",target:"_blank",rel:"noopener noreferrer"},Ks=s("\u529B\u6263"),Qs=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>       _______3______
      /              \\
  ___5__           ___1__
 /      \\         /      \\
6        2       0        8
        /  \\
       7    4

For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> right <span class="token operator">:</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-\u4ECE\u6709\u5E8F\u6570\u7EC4\u4E2D\u6784\u9020\u4E8C\u53C9\u67E5\u627E\u6811" tabindex="-1"><a class="header-anchor" href="#_6-\u4ECE\u6709\u5E8F\u6570\u7EC4\u4E2D\u6784\u9020\u4E8C\u53C9\u67E5\u627E\u6811" aria-hidden="true">#</a> 6. \u4ECE\u6709\u5E8F\u6570\u7EC4\u4E2D\u6784\u9020\u4E8C\u53C9\u67E5\u627E\u6811</h3><p>108. Convert Sorted Array to Binary Search Tree (Easy)</p>`,4),Xs={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},Js=s("Leetcode"),Ys=s(" / "),Zs={href:"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},$s=s("\u529B\u6263"),na=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">toBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> sIdx<span class="token punctuation">,</span> <span class="token keyword">int</span> eIdx<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sIdx <span class="token operator">&gt;</span> eIdx<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mIdx <span class="token operator">=</span> <span class="token punctuation">(</span>sIdx <span class="token operator">+</span> eIdx<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span>  <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> sIdx<span class="token punctuation">,</span> mIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">toBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> eIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-\u6839\u636E\u6709\u5E8F\u94FE\u8868\u6784\u9020\u5E73\u8861\u7684\u4E8C\u53C9\u67E5\u627E\u6811" tabindex="-1"><a class="header-anchor" href="#_7-\u6839\u636E\u6709\u5E8F\u94FE\u8868\u6784\u9020\u5E73\u8861\u7684\u4E8C\u53C9\u67E5\u627E\u6811" aria-hidden="true">#</a> 7. \u6839\u636E\u6709\u5E8F\u94FE\u8868\u6784\u9020\u5E73\u8861\u7684\u4E8C\u53C9\u67E5\u627E\u6811</h3><p>109. Convert Sorted List to Binary Search Tree (Medium)</p>`,3),sa={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},aa=s("Leetcode"),ea=s(" / "),ta={href:"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},pa=s("\u529B\u6263"),oa=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \\
   -3   9
   /   /
 -10  5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> preMid <span class="token operator">=</span> <span class="token function">preMid</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> mid <span class="token operator">=</span> preMid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    preMid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// \u65AD\u5F00\u94FE\u8868</span>
    <span class="token class-name">TreeNode</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">preMid</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-\u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u5BFB\u627E\u4E24\u4E2A\u8282\u70B9-\u4F7F\u5B83\u4EEC\u7684\u548C\u4E3A\u4E00\u4E2A\u7ED9\u5B9A\u503C" tabindex="-1"><a class="header-anchor" href="#_8-\u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u5BFB\u627E\u4E24\u4E2A\u8282\u70B9-\u4F7F\u5B83\u4EEC\u7684\u548C\u4E3A\u4E00\u4E2A\u7ED9\u5B9A\u503C" aria-hidden="true">#</a> 8. \u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u5BFB\u627E\u4E24\u4E2A\u8282\u70B9\uFF0C\u4F7F\u5B83\u4EEC\u7684\u548C\u4E3A\u4E00\u4E2A\u7ED9\u5B9A\u503C</h3><p>653. Two Sum IV - Input is a BST (Easy)</p>`,4),ca={href:"https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/",target:"_blank",rel:"noopener noreferrer"},la=s("Leetcode"),ia=s(" / "),ua={href:"https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/",target:"_blank",rel:"noopener noreferrer"},ra=s("\u529B\u6263"),ka=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:

    5
   / \\
  3   6
 / \\   \\
2   4   7

Target = 9

Output: True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528\u4E2D\u5E8F\u904D\u5386\u5F97\u5230\u6709\u5E8F\u6570\u7EC4\u4E4B\u540E\uFF0C\u518D\u5229\u7528\u53CC\u6307\u9488\u5BF9\u6570\u7EC4\u8FDB\u884C\u67E5\u627E\u3002</p><p>\u5E94\u8BE5\u6CE8\u610F\u5230\uFF0C\u8FD9\u4E00\u9898\u4E0D\u80FD\u7528\u5206\u522B\u5728\u5DE6\u53F3\u5B50\u6811\u4E24\u90E8\u5206\u6765\u5904\u7406\u8FD9\u79CD\u601D\u60F3\uFF0C\u56E0\u4E3A\u4E24\u4E2A\u5F85\u6C42\u7684\u8282\u70B9\u53EF\u80FD\u5206\u522B\u5728\u5DE6\u53F3\u5B50\u6811\u4E2D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-\u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u67E5\u627E\u4E24\u4E2A\u8282\u70B9\u4E4B\u5DEE\u7684\u6700\u5C0F\u7EDD\u5BF9\u503C" tabindex="-1"><a class="header-anchor" href="#_9-\u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u67E5\u627E\u4E24\u4E2A\u8282\u70B9\u4E4B\u5DEE\u7684\u6700\u5C0F\u7EDD\u5BF9\u503C" aria-hidden="true">#</a> 9. \u5728\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u67E5\u627E\u4E24\u4E2A\u8282\u70B9\u4E4B\u5DEE\u7684\u6700\u5C0F\u7EDD\u5BF9\u503C</h3><p>530. Minimum Absolute Difference in BST (Easy)</p>`,6),da={href:"https://leetcode.com/problems/minimum-absolute-difference-in-bst/description/",target:"_blank",rel:"noopener noreferrer"},va=s("Leetcode"),ma=s(" / "),ba={href:"https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/description/",target:"_blank",rel:"noopener noreferrer"},ha=s("\u529B\u6263"),fa=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:

   1
    \\
     3
    /
   2

Output:

1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5229\u7528\u4E8C\u53C9\u67E5\u627E\u6811\u7684\u4E2D\u5E8F\u904D\u5386\u4E3A\u6709\u5E8F\u7684\u6027\u8D28\uFF0C\u8BA1\u7B97\u4E2D\u5E8F\u904D\u5386\u4E2D\u4E34\u8FD1\u7684\u4E24\u4E2A\u8282\u70B9\u4E4B\u5DEE\u7684\u7EDD\u5BF9\u503C\uFF0C\u53D6\u6700\u5C0F\u503C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> minDiff <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">TreeNode</span> preNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> minDiff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> minDiff <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minDiff<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val <span class="token operator">-</span> preNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    preNode <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-\u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u51FA\u73B0\u6B21\u6570\u6700\u591A\u7684\u503C" tabindex="-1"><a class="header-anchor" href="#_10-\u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u51FA\u73B0\u6B21\u6570\u6700\u591A\u7684\u503C" aria-hidden="true">#</a> 10. \u5BFB\u627E\u4E8C\u53C9\u67E5\u627E\u6811\u4E2D\u51FA\u73B0\u6B21\u6570\u6700\u591A\u7684\u503C</h3><p>501. Find Mode in Binary Search Tree (Easy)</p>`,5),ya={href:"https://leetcode.com/problems/find-mode-in-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},wa=s("Leetcode"),_a=s(" / "),ga={href:"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer"},Ea=s("\u529B\u6263"),Aa=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>   1
    \\
     2
    /
   2

return [2].
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7B54\u6848\u53EF\u80FD\u4E0D\u6B62\u4E00\u4E2A\uFF0C\u4E5F\u5C31\u662F\u6709\u591A\u4E2A\u503C\u51FA\u73B0\u7684\u6B21\u6570\u4E00\u6837\u591A\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> curCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> maxCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">TreeNode</span> preNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findMode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> maxCntNums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> maxCntNums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxCntNums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> maxCntNums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preNode<span class="token punctuation">.</span>val <span class="token operator">==</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> curCnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> curCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curCnt <span class="token operator">&gt;</span> maxCnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxCnt <span class="token operator">=</span> curCnt<span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curCnt <span class="token operator">==</span> maxCnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    preNode <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trie" tabindex="-1"><a class="header-anchor" href="#trie" aria-hidden="true">#</a> Trie</h2><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5c638d59-d4ae-4ba4-ad44-80bdc30f38dd.jpg" alt="img"></p><p>Trie\uFF0C\u53C8\u79F0\u524D\u7F00\u6811\u6216\u5B57\u5178\u6811\uFF0C\u7528\u4E8E\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u5B58\u5728\u6216\u8005\u662F\u5426\u5177\u6709\u67D0\u79CD\u5B57\u7B26\u4E32\u524D\u7F00\u3002</p><h3 id="_1-\u5B9E\u73B0\u4E00\u4E2A-trie" tabindex="-1"><a class="header-anchor" href="#_1-\u5B9E\u73B0\u4E00\u4E2A-trie" aria-hidden="true">#</a> 1. \u5B9E\u73B0\u4E00\u4E2A Trie</h3><p>208. Implement Trie (Prefix Tree) (Medium)</p>`,8),Ba={href:"https://leetcode.com/problems/implement-trie-prefix-tree/description/",target:"_blank",rel:"noopener noreferrer"},xa=s("Leetcode"),Ta=s(" / "),Na={href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/description/",target:"_blank",rel:"noopener noreferrer"},ja=s("\u529B\u6263"),La=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isLeaf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>isLeaf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> node<span class="token punctuation">.</span>isLeaf<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">startWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">startWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">startWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>childs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u5B9E\u73B0\u4E00\u4E2A-trie-\u7528\u6765\u6C42\u524D\u7F00\u548C" tabindex="-1"><a class="header-anchor" href="#_2-\u5B9E\u73B0\u4E00\u4E2A-trie-\u7528\u6765\u6C42\u524D\u7F00\u548C" aria-hidden="true">#</a> 2. \u5B9E\u73B0\u4E00\u4E2A Trie\uFF0C\u7528\u6765\u6C42\u524D\u7F00\u548C</h3><p>677. Map Sum Pairs (Medium)</p>`,3),Ca={href:"https://leetcode.com/problems/map-sum-pairs/description/",target:"_blank",rel:"noopener noreferrer"},Sa=s("Leetcode"),Fa=s(" / "),Da={href:"https://leetcode-cn.com/problems/map-sum-pairs/description/",target:"_blank",rel:"noopener noreferrer"},Ia=s("\u529B\u6263"),Ma=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: insert(&quot;apple&quot;, 3), Output: Null
Input: sum(&quot;ap&quot;), Output: 3
Input: insert(&quot;app&quot;, 2), Output: Null
Input: sum(&quot;ap&quot;), Output: 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MapSum</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MapSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>child<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> child <span class="token operator">:</span> node<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> <span class="token function">sum</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexForChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Oa(qa,Va){const a=o("ExternalLinkIcon");return c(),l(i,null,[r,n("p",null,[n("a",k,[d,e(a)]),v,n("a",m,[b,e(a)])]),h,n("p",null,[n("a",f,[y,e(a)]),w,n("a",_,[g,e(a)])]),E,n("p",null,[n("a",A,[B,e(a)]),x,n("a",T,[N,e(a)])]),j,n("p",null,[n("a",L,[C,e(a)]),S,n("a",F,[D,e(a)])]),I,n("p",null,[n("a",M,[O,e(a)]),q,n("a",V,[R,e(a)])]),P,n("p",null,[n("a",W,[G,e(a)]),z,n("a",U,[H,e(a)])]),K,n("p",null,[n("a",Q,[X,e(a)]),J,n("a",Y,[Z,e(a)])]),$,n("p",null,[n("a",nn,[sn,e(a)]),an,n("a",en,[tn,e(a)])]),pn,n("p",null,[n("a",on,[cn,e(a)]),ln,n("a",un,[rn,e(a)])]),kn,n("p",null,[n("a",dn,[vn,e(a)]),mn,n("a",bn,[hn,e(a)])]),fn,n("p",null,[n("a",yn,[wn,e(a)]),_n,n("a",gn,[En,e(a)])]),An,n("p",null,[n("a",Bn,[xn,e(a)]),Tn,n("a",Nn,[jn,e(a)])]),Ln,n("p",null,[n("a",Cn,[Sn,e(a)]),Fn,n("a",Dn,[In,e(a)])]),Mn,n("p",null,[n("a",On,[qn,e(a)]),Vn,n("a",Rn,[Pn,e(a)])]),Wn,n("p",null,[n("a",Gn,[zn,e(a)]),Un,n("a",Hn,[Kn,e(a)])]),Qn,n("p",null,[n("a",Xn,[Jn,e(a)]),Yn,n("a",Zn,[$n,e(a)])]),ns,n("p",null,[n("a",ss,[as,e(a)]),es,n("a",ts,[ps,e(a)])]),os,n("p",null,[n("a",cs,[ls,e(a)]),is,n("a",us,[rs,e(a)])]),ks,n("p",null,[n("a",ds,[vs,e(a)]),ms,n("a",bs,[hs,e(a)])]),fs,n("p",null,[n("a",ys,[ws,e(a)]),_s,n("a",gs,[Es,e(a)])]),As,n("p",null,[n("a",Bs,[xs,e(a)]),Ts,n("a",Ns,[js,e(a)])]),Ls,n("p",null,[n("a",Cs,[Ss,e(a)]),Fs,n("a",Ds,[Is,e(a)])]),Ms,n("p",null,[n("a",Os,[qs,e(a)]),Vs,n("a",Rs,[Ps,e(a)])]),Ws,n("p",null,[n("a",Gs,[zs,e(a)]),Us,n("a",Hs,[Ks,e(a)])]),Qs,n("p",null,[n("a",Xs,[Js,e(a)]),Ys,n("a",Zs,[$s,e(a)])]),na,n("p",null,[n("a",sa,[aa,e(a)]),ea,n("a",ta,[pa,e(a)])]),oa,n("p",null,[n("a",ca,[la,e(a)]),ia,n("a",ua,[ra,e(a)])]),ka,n("p",null,[n("a",da,[va,e(a)]),ma,n("a",ba,[ha,e(a)])]),fa,n("p",null,[n("a",ya,[wa,e(a)]),_a,n("a",ga,[Ea,e(a)])]),Aa,n("p",null,[n("a",Ba,[xa,e(a)]),Ta,n("a",Na,[ja,e(a)])]),La,n("p",null,[n("a",Ca,[Sa,e(a)]),Fa,n("a",Da,[Ia,e(a)])]),Ma],64)}var Wa=p(u,[["render",Oa],["__file","Leetcode \u9898\u89E3 - \u6811.html.vue"]]);export{Wa as default};
