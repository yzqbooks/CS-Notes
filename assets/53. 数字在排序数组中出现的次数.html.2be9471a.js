import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as t,c as o,a as n,b as c,F as l,d as s,e as i}from"./app.d02315a2.js";const u={},r=n("h1",{id:"_53-\u6570\u5B57\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_53-\u6570\u5B57\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570","aria-hidden":"true"},"#"),s(" 53. \u6570\u5B57\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570")],-1),k=n("h2",{id:"\u9898\u76EE\u94FE\u63A5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898\u76EE\u94FE\u63A5","aria-hidden":"true"},"#"),s(" \u9898\u76EE\u94FE\u63A5")],-1),d={href:"https://www.nowcoder.com/practice/70610bf967994b22bb1c26f9ae901fa2?tpId=13&tqId=11190&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github",target:"_blank",rel:"noopener noreferrer"},m=s("\u725B\u5BA2\u7F51"),v=i(`<h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
nums = 1, 2, 3, 3, 3, 3, 4, 6
K = 3

Output:
4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a> \u89E3\u9898\u601D\u8DEF</h2><p>\u53EA\u8981\u80FD\u627E\u51FA\u7ED9\u5B9A\u7684\u6570\u5B57 k \u5728\u6709\u5E8F\u6570\u7EC4\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u5C31\u80FD\u77E5\u9053\u8BE5\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570\u3002</p><p>\u5148\u8003\u8651\u5982\u4F55\u5B9E\u73B0\u5BFB\u627E\u6570\u5B57\u5728\u6709\u5E8F\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u3002\u6B63\u5E38\u7684\u4E8C\u5206\u67E5\u627E\u5982\u4E0B\uFF0C\u5728\u67E5\u627E\u5230\u7ED9\u5B9A\u5143\u7D20 k \u4E4B\u540E\uFF0C\u7ACB\u5373\u8FD4\u56DE\u5F53\u524D\u7D22\u5F15\u4E0B\u6807\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u5728\u67E5\u627E\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u65F6\uFF0C\u627E\u5230\u5143\u7D20\u4E4B\u540E\u5E94\u8BE5\u7EE7\u7EED\u5F80\u524D\u627E\u3002\u4E5F\u5C31\u662F\u5F53 nums[m]&gt;=k \u65F6\uFF0C\u5728\u5DE6\u533A\u95F4\u7EE7\u7EED\u67E5\u627E\uFF0C\u5DE6\u533A\u95F4\u5E94\u8BE5\u5305\u542B m \u4F4D\u7F6E\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token class-name">K</span><span class="token punctuation">)</span>
            h <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u67E5\u627E\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\u53EF\u4EE5\u8F6C\u6362\u6210\u5BFB\u627E k+1 \u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u5E76\u518D\u5F80\u524D\u79FB\u52A8\u4E00\u4E2A\u4F4D\u7F6E\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">GetNumberOfK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token class-name">K</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> last <span class="token operator">-</span> first<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9700\u8981\u6CE8\u610F\u4EE5\u4E0A\u5B9E\u73B0\u7684\u67E5\u627E\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u7684 binarySearch \u65B9\u6CD5\uFF0Ch \u7684\u521D\u59CB\u503C\u4E3A nums.length\uFF0C\u800C\u4E0D\u662F nums.length - 1\u3002\u5148\u770B\u4EE5\u4E0B\u793A\u4F8B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>nums = [2,2], k = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5982\u679C h \u7684\u53D6\u503C\u4E3A nums.length - 1\uFF0C\u90A3\u4E48\u5728\u67E5\u627E\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\u65F6\uFF0CbinarySearch(nums, k + 1) - 1 = 1 - 1 = 0\u3002\u8FD9\u662F\u56E0\u4E3A binarySearch \u53EA\u4F1A\u8FD4\u56DE [0, nums.length - 1] \u8303\u56F4\u7684\u503C\uFF0C\u5BF9\u4E8E binarySearch([2,2], 3) \uFF0C\u6211\u4EEC\u5E0C\u671B\u8FD4\u56DE 3 \u63D2\u5165 nums \u4E2D\u7684\u4F4D\u7F6E\uFF0C\u4E5F\u5C31\u662F\u6570\u7EC4\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\u518D\u5F80\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u5373 nums.length\u3002\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u5C06 h \u53D6\u503C\u4E3A nums.length\uFF0C\u4ECE\u800C\u4F7F\u5F97 binarySearch \u8FD4\u56DE\u7684\u533A\u95F4\u66F4\u5927\uFF0C\u80FD\u591F\u8986\u76D6 k \u5927\u4E8E nums \u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u60C5\u51B5\u3002</p>`,13);function b(h,_){const a=p("ExternalLinkIcon");return t(),o(l,null,[r,k,n("p",null,[n("a",d,[m,c(a)])]),v],64)}var w=e(u,[["render",b],["__file","53. \u6570\u5B57\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u51FA\u73B0\u7684\u6B21\u6570.html.vue"]]);export{w as default};
