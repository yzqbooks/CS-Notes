import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as l,a as n,b as e,F as i,e as t,d as s}from"./app.d02315a2.js";const u={},r=t('<h1 id="leetcode-\u9898\u89E3-\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#leetcode-\u9898\u89E3-\u94FE\u8868" aria-hidden="true">#</a> Leetcode \u9898\u89E3 - \u94FE\u8868</h1><ul><li><a href="#leetcode-%E9%A2%98%E8%A7%A3---%E9%93%BE%E8%A1%A8">Leetcode \u9898\u89E3 - \u94FE\u8868</a><ul><li><a href="#1-%E6%89%BE%E5%87%BA%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BA%A4%E7%82%B9">1. \u627E\u51FA\u4E24\u4E2A\u94FE\u8868\u7684\u4EA4\u70B9</a></li><li><a href="#2-%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC">2. \u94FE\u8868\u53CD\u8F6C</a></li><li><a href="#3-%E5%BD%92%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8">3. \u5F52\u5E76\u4E24\u4E2A\u6709\u5E8F\u7684\u94FE\u8868</a></li><li><a href="#4-%E4%BB%8E%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9">4. \u4ECE\u6709\u5E8F\u94FE\u8868\u4E2D\u5220\u9664\u91CD\u590D\u8282\u70B9</a></li><li><a href="#5-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9">5. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C n \u4E2A\u8282\u70B9</a></li><li><a href="#6-%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%9B%B8%E9%82%BB%E7%BB%93%E7%82%B9">6. \u4EA4\u6362\u94FE\u8868\u4E2D\u7684\u76F8\u90BB\u7ED3\u70B9</a></li><li><a href="#7-%E9%93%BE%E8%A1%A8%E6%B1%82%E5%92%8C">7. \u94FE\u8868\u6C42\u548C</a></li><li><a href="#8-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8">8. \u56DE\u6587\u94FE\u8868</a></li><li><a href="#9-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8">9. \u5206\u9694\u94FE\u8868</a></li><li><a href="#10-%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E6%8C%89%E5%A5%87%E5%81%B6%E8%81%9A%E9%9B%86">10. \u94FE\u8868\u5143\u7D20\u6309\u5947\u5076\u805A\u96C6</a></li></ul></li></ul><p>\u94FE\u8868\u662F\u7A7A\u8282\u70B9\uFF0C\u6216\u8005\u6709\u4E00\u4E2A\u503C\u548C\u4E00\u4E2A\u6307\u5411\u4E0B\u4E00\u4E2A\u94FE\u8868\u7684\u6307\u9488\uFF0C\u56E0\u6B64\u5F88\u591A\u94FE\u8868\u95EE\u9898\u53EF\u4EE5\u7528\u9012\u5F52\u6765\u5904\u7406\u3002</p><h2 id="_1-\u627E\u51FA\u4E24\u4E2A\u94FE\u8868\u7684\u4EA4\u70B9" tabindex="-1"><a class="header-anchor" href="#_1-\u627E\u51FA\u4E24\u4E2A\u94FE\u8868\u7684\u4EA4\u70B9" aria-hidden="true">#</a> 1. \u627E\u51FA\u4E24\u4E2A\u94FE\u8868\u7684\u4EA4\u70B9</h2><p>160. Intersection of Two Linked Lists (Easy)</p>',5),d={href:"https://leetcode.com/problems/intersection-of-two-linked-lists/description/",target:"_blank",rel:"noopener noreferrer"},k=s("Leetcode"),v=s(" / "),m={href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/",target:"_blank",rel:"noopener noreferrer"},b=s("\u529B\u6263"),h=t(`<p>\u4F8B\u5982\u4EE5\u4E0B\u793A\u4F8B\u4E2D A \u548C B \u4E24\u4E2A\u94FE\u8868\u76F8\u4EA4\u4E8E c1\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>A:          a1 \u2192 a2
                    \u2198
                      c1 \u2192 c2 \u2192 c3
                    \u2197
B:    b1 \u2192 b2 \u2192 b3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u4E0D\u4F1A\u51FA\u73B0\u4EE5\u4E0B\u76F8\u4EA4\u7684\u60C5\u51B5\uFF0C\u56E0\u4E3A\u6BCF\u4E2A\u8282\u70B9\u53EA\u6709\u4E00\u4E2A next \u6307\u9488\uFF0C\u4E5F\u5C31\u53EA\u80FD\u6709\u4E00\u4E2A\u540E\u7EE7\u8282\u70B9\uFF0C\u800C\u4EE5\u4E0B\u793A\u4F8B\u4E2D\u8282\u70B9 c \u6709\u4E24\u4E2A\u540E\u7EE7\u8282\u70B9\u3002</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>A:          a1 \u2192 a2       d1 \u2192 d2
                    \u2198  \u2197
                      c
                    \u2197  \u2198
B:    b1 \u2192 b2 \u2192 b3        e1 \u2192 e2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8981\u6C42\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(N)\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3A O(1)\u3002\u5982\u679C\u4E0D\u5B58\u5728\u4EA4\u70B9\u5219\u8FD4\u56DE null\u3002</p><p>\u8BBE A \u7684\u957F\u5EA6\u4E3A a + c\uFF0CB \u7684\u957F\u5EA6\u4E3A b + c\uFF0C\u5176\u4E2D c \u4E3A\u5C3E\u90E8\u516C\u5171\u90E8\u5206\u957F\u5EA6\uFF0C\u53EF\u77E5 a + c + b = b + c + a\u3002</p><p>\u5F53\u8BBF\u95EE A \u94FE\u8868\u7684\u6307\u9488\u8BBF\u95EE\u5230\u94FE\u8868\u5C3E\u90E8\u65F6\uFF0C\u4EE4\u5B83\u4ECE\u94FE\u8868 B \u7684\u5934\u90E8\u5F00\u59CB\u8BBF\u95EE\u94FE\u8868 B\uFF1B\u540C\u6837\u5730\uFF0C\u5F53\u8BBF\u95EE B \u94FE\u8868\u7684\u6307\u9488\u8BBF\u95EE\u5230\u94FE\u8868\u5C3E\u90E8\u65F6\uFF0C\u4EE4\u5B83\u4ECE\u94FE\u8868 A \u7684\u5934\u90E8\u5F00\u59CB\u8BBF\u95EE\u94FE\u8868 A\u3002\u8FD9\u6837\u5C31\u80FD\u63A7\u5236\u8BBF\u95EE A \u548C B \u4E24\u4E2A\u94FE\u8868\u7684\u6307\u9488\u80FD\u540C\u65F6\u8BBF\u95EE\u5230\u4EA4\u70B9\u3002</p><p>\u5982\u679C\u4E0D\u5B58\u5728\u4EA4\u70B9\uFF0C\u90A3\u4E48 a + b = b + a\uFF0C\u4EE5\u4E0B\u5B9E\u73B0\u4EE3\u7801\u4E2D l1 \u548C l2 \u4F1A\u540C\u65F6\u4E3A null\uFF0C\u4ECE\u800C\u9000\u51FA\u5FAA\u73AF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> headA<span class="token punctuation">,</span> l2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l1 <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headB <span class="token operator">:</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headA <span class="token operator">:</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u53EA\u662F\u5224\u65AD\u662F\u5426\u5B58\u5728\u4EA4\u70B9\uFF0C\u90A3\u4E48\u5C31\u662F\u53E6\u4E00\u4E2A\u95EE\u9898\uFF0C\u5373 <a href="#link">\u7F16\u7A0B\u4E4B\u7F8E 3.6</a> \u7684\u95EE\u9898\u3002\u6709\u4E24\u79CD\u89E3\u6CD5\uFF1A</p><ul><li>\u628A\u7B2C\u4E00\u4E2A\u94FE\u8868\u7684\u7ED3\u5C3E\u8FDE\u63A5\u5230\u7B2C\u4E8C\u4E2A\u94FE\u8868\u7684\u5F00\u5934\uFF0C\u770B\u7B2C\u4E8C\u4E2A\u94FE\u8868\u662F\u5426\u5B58\u5728\u73AF\uFF1B</li><li>\u6216\u8005\u76F4\u63A5\u6BD4\u8F83\u4E24\u4E2A\u94FE\u8868\u7684\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u662F\u5426\u76F8\u540C\u3002</li></ul><h2 id="_2-\u94FE\u8868\u53CD\u8F6C" tabindex="-1"><a class="header-anchor" href="#_2-\u94FE\u8868\u53CD\u8F6C" aria-hidden="true">#</a> 2. \u94FE\u8868\u53CD\u8F6C</h2><p>206. Reverse Linked List (Easy)</p>`,13),_={href:"https://leetcode.com/problems/reverse-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},w=s("Leetcode"),g=s(" / "),f={href:"https://leetcode-cn.com/problems/reverse-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},y=s("\u529B\u6263"),x=t(`<p>\u9012\u5F52</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5934\u63D2\u6CD5</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-\u5F52\u5E76\u4E24\u4E2A\u6709\u5E8F\u7684\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_3-\u5F52\u5E76\u4E24\u4E2A\u6709\u5E8F\u7684\u94FE\u8868" aria-hidden="true">#</a> 3. \u5F52\u5E76\u4E24\u4E2A\u6709\u5E8F\u7684\u94FE\u8868</h2><p>21. Merge Two Sorted Lists (Easy)</p>`,6),E={href:"https://leetcode.com/problems/merge-two-sorted-lists/description/",target:"_blank",rel:"noopener noreferrer"},L=s("Leetcode"),N=s(" / "),A={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/description/",target:"_blank",rel:"noopener noreferrer"},B=s("\u529B\u6263"),j=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-\u4ECE\u6709\u5E8F\u94FE\u8868\u4E2D\u5220\u9664\u91CD\u590D\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_4-\u4ECE\u6709\u5E8F\u94FE\u8868\u4E2D\u5220\u9664\u91CD\u590D\u8282\u70B9" aria-hidden="true">#</a> 4. \u4ECE\u6709\u5E8F\u94FE\u8868\u4E2D\u5220\u9664\u91CD\u590D\u8282\u70B9</h2><p>83. Remove Duplicates from Sorted List (Easy)</p>`,3),S={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/",target:"_blank",rel:"noopener noreferrer"},H=s("Leetcode"),I=s(" / "),D={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/",target:"_blank",rel:"noopener noreferrer"},T=s("\u529B\u6263"),C=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given 1-&gt;1-&gt;2, return 1-&gt;2.
Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">?</span> head<span class="token punctuation">.</span>next <span class="token operator">:</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_5-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u8282\u70B9" aria-hidden="true">#</a> 5. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C n \u4E2A\u8282\u70B9</h2><p>19. Remove Nth Node From End of List (Medium)</p>`,4),F={href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/",target:"_blank",rel:"noopener noreferrer"},O=s("Leetcode"),z=s(" / "),M={href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/",target:"_blank",rel:"noopener noreferrer"},P=s("\u529B\u6263"),G=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.
After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-\u4EA4\u6362\u94FE\u8868\u4E2D\u7684\u76F8\u90BB\u7ED3\u70B9" tabindex="-1"><a class="header-anchor" href="#_6-\u4EA4\u6362\u94FE\u8868\u4E2D\u7684\u76F8\u90BB\u7ED3\u70B9" aria-hidden="true">#</a> 6. \u4EA4\u6362\u94FE\u8868\u4E2D\u7684\u76F8\u90BB\u7ED3\u70B9</h2><p>24. Swap Nodes in Pairs (Medium)</p>`,4),V={href:"https://leetcode.com/problems/swap-nodes-in-pairs/description/",target:"_blank",rel:"noopener noreferrer"},R=s("Leetcode"),q=s(" / "),U={href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/description/",target:"_blank",rel:"noopener noreferrer"},J=s("\u529B\u6263"),K=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u9898\u76EE\u8981\u6C42\uFF1A\u4E0D\u80FD\u4FEE\u6539\u7ED3\u70B9\u7684 val \u503C\uFF0CO(1) \u7A7A\u95F4\u590D\u6742\u5EA6\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2 <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>
        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>

        pre <span class="token operator">=</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-\u94FE\u8868\u6C42\u548C" tabindex="-1"><a class="header-anchor" href="#_7-\u94FE\u8868\u6C42\u548C" aria-hidden="true">#</a> 7. \u94FE\u8868\u6C42\u548C</h2><p>445. Add Two Numbers II (Medium)</p>`,5),Q={href:"https://leetcode.com/problems/add-two-numbers-ii/description/",target:"_blank",rel:"noopener noreferrer"},W=s("Leetcode"),X=s(" / "),Y={href:"https://leetcode-cn.com/problems/add-two-numbers-ii/description/",target:"_blank",rel:"noopener noreferrer"},Z=s("\u529B\u6263"),$=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
Output: 7 -&gt; 8 -&gt; 0 -&gt; 7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u8981\u6C42\uFF1A\u4E0D\u80FD\u4FEE\u6539\u539F\u59CB\u94FE\u8868\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l1Stack <span class="token operator">=</span> <span class="token function">buildStack</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l2Stack <span class="token operator">=</span> <span class="token function">buildStack</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1Stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>l2Stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> l1Stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1Stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> l2Stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2Stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildStack</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-\u56DE\u6587\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_8-\u56DE\u6587\u94FE\u8868" aria-hidden="true">#</a> 8. \u56DE\u6587\u94FE\u8868</h2><p>234. Palindrome Linked List (Easy)</p>`,5),nn={href:"https://leetcode.com/problems/palindrome-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},sn=s("Leetcode"),an=s(" / "),en={href:"https://leetcode-cn.com/problems/palindrome-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},tn=s("\u529B\u6263"),pn=t(`<p>\u9898\u76EE\u8981\u6C42\uFF1A\u4EE5 O(1) \u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u6765\u6C42\u89E3\u3002</p><p>\u5207\u6210\u4E24\u534A\uFF0C\u628A\u540E\u534A\u6BB5\u53CD\u8F6C\uFF0C\u7136\u540E\u6BD4\u8F83\u4E24\u534A\u662F\u5426\u76F8\u7B49\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">// \u5076\u6570\u8282\u70B9\uFF0C\u8BA9 slow \u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9</span>
    <span class="token function">cut</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> slow<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// \u5207\u6210\u4E24\u4E2A\u94FE\u8868</span>
    <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">reverse</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> cutNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">!=</span> cutNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> nextNode <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>
        newHead <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> nextNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">!=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-\u5206\u9694\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_9-\u5206\u9694\u94FE\u8868" aria-hidden="true">#</a> 9. \u5206\u9694\u94FE\u8868</h2><p>725. Split Linked List in Parts(Medium)</p>`,5),on={href:"https://leetcode.com/problems/split-linked-list-in-parts/description/",target:"_blank",rel:"noopener noreferrer"},cn=s("Leetcode"),ln=s(" / "),un={href:"https://leetcode-cn.com/problems/split-linked-list-in-parts/description/",target:"_blank",rel:"noopener noreferrer"},rn=s("\u529B\u6263"),dn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input:
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u628A\u94FE\u8868\u5206\u9694\u6210 k \u90E8\u5206\uFF0C\u6BCF\u90E8\u5206\u7684\u957F\u5EA6\u90FD\u5E94\u8BE5\u5C3D\u53EF\u80FD\u76F8\u540C\uFF0C\u6392\u5728\u524D\u9762\u7684\u957F\u5EA6\u5E94\u8BE5\u5927\u4E8E\u7B49\u4E8E\u540E\u9762\u7684\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">splitListToParts</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">%</span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cur <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token keyword">int</span> curSize <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token punctuation">(</span>mod<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> curSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-\u94FE\u8868\u5143\u7D20\u6309\u5947\u5076\u805A\u96C6" tabindex="-1"><a class="header-anchor" href="#_10-\u94FE\u8868\u5143\u7D20\u6309\u5947\u5076\u805A\u96C6" aria-hidden="true">#</a> 10. \u94FE\u8868\u5143\u7D20\u6309\u5947\u5076\u805A\u96C6</h2><p>328. Odd Even Linked List (Medium)</p>`,5),kn={href:"https://leetcode.com/problems/odd-even-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},vn=s("Leetcode"),mn=s(" / "),bn={href:"https://leetcode-cn.com/problems/odd-even-linked-list/description/",target:"_blank",rel:"noopener noreferrer"},hn=s("\u529B\u6263"),_n=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Example:
Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL,
return 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span> odd <span class="token operator">=</span> head<span class="token punctuation">,</span> even <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> evenHead <span class="token operator">=</span> even<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        even<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function wn(gn,fn){const a=o("ExternalLinkIcon");return c(),l(i,null,[r,n("p",null,[n("a",d,[k,e(a)]),v,n("a",m,[b,e(a)])]),h,n("p",null,[n("a",_,[w,e(a)]),g,n("a",f,[y,e(a)])]),x,n("p",null,[n("a",E,[L,e(a)]),N,n("a",A,[B,e(a)])]),j,n("p",null,[n("a",S,[H,e(a)]),I,n("a",D,[T,e(a)])]),C,n("p",null,[n("a",F,[O,e(a)]),z,n("a",M,[P,e(a)])]),G,n("p",null,[n("a",V,[R,e(a)]),q,n("a",U,[J,e(a)])]),K,n("p",null,[n("a",Q,[W,e(a)]),X,n("a",Y,[Z,e(a)])]),$,n("p",null,[n("a",nn,[sn,e(a)]),an,n("a",en,[tn,e(a)])]),pn,n("p",null,[n("a",on,[cn,e(a)]),ln,n("a",un,[rn,e(a)])]),dn,n("p",null,[n("a",kn,[vn,e(a)]),mn,n("a",bn,[hn,e(a)])]),_n],64)}var En=p(u,[["render",wn],["__file","Leetcode \u9898\u89E3 - \u94FE\u8868.html.vue"]]);export{En as default};
