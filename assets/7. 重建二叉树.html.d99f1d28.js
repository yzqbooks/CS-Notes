import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,o as p,c as o,a as n,b as c,F as i,d as s,e as l}from"./app.5ce5af5d.js";const u={},r=n("h1",{id:"_7-\u91CD\u5EFA\u4E8C\u53C9\u6811",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-\u91CD\u5EFA\u4E8C\u53C9\u6811","aria-hidden":"true"},"#"),s(" 7. \u91CD\u5EFA\u4E8C\u53C9\u6811")],-1),k=n("h2",{id:"\u9898\u76EE\u94FE\u63A5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898\u76EE\u94FE\u63A5","aria-hidden":"true"},"#"),s(" \u9898\u76EE\u94FE\u63A5")],-1),d={href:"https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&tqId=11157&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github",target:"_blank",rel:"noopener noreferrer"},m=s("\u725B\u5BA2\u7F51"),v=l(`<h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h2><p>\u6839\u636E\u4E8C\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\uFF0C\u91CD\u5EFA\u51FA\u8BE5\u4E8C\u53C9\u6811\u3002\u5047\u8BBE\u8F93\u5165\u7684\u524D\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u4E2D\u90FD\u4E0D\u542B\u91CD\u590D\u7684\u6570\u5B57\u3002</p><p>![img](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191102210342488.png&quot; width=&quot;400)</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a> \u89E3\u9898\u601D\u8DEF</h2><p>\u524D\u5E8F\u904D\u5386\u7684\u7B2C\u4E00\u4E2A\u503C\u4E3A\u6839\u8282\u70B9\u7684\u503C\uFF0C\u4F7F\u7528\u8FD9\u4E2A\u503C\u5C06\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\u5206\u6210\u4E24\u90E8\u5206\uFF0C\u5DE6\u90E8\u5206\u4E3A\u6811\u7684\u5DE6\u5B50\u6811\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\uFF0C\u53F3\u90E8\u5206\u4E3A\u6811\u7684\u53F3\u5B50\u6811\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u3002\u7136\u540E\u5206\u522B\u5BF9\u5DE6\u53F3\u5B50\u6811\u9012\u5F52\u5730\u6C42\u89E3\u3002</p><p>![img](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/60c4a44c-7829-4242-b3a1-26c3b513aaf0.gif&quot; width=&quot;430px&quot;&gt;</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u7F13\u5B58\u4E2D\u5E8F\u904D\u5386\u6570\u7EC4\u6BCF\u4E2A\u503C\u5BF9\u5E94\u7684\u7D22\u5F15</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexForInOrders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        indexForInOrders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> preL<span class="token punctuation">,</span> <span class="token keyword">int</span> preR<span class="token punctuation">,</span> <span class="token keyword">int</span> inL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preL <span class="token operator">&gt;</span> preR<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inIndex <span class="token operator">=</span> indexForInOrders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftTreeSize <span class="token operator">=</span> inIndex <span class="token operator">-</span> inL<span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> preL <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preL <span class="token operator">+</span> leftTreeSize<span class="token punctuation">,</span> inL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> preL <span class="token operator">+</span> leftTreeSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preR<span class="token punctuation">,</span> inL <span class="token operator">+</span> leftTreeSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function h(b,_){const a=e("ExternalLinkIcon");return p(),o(i,null,[r,k,n("p",null,[n("a",d,[m,c(a)])]),v],64)}var w=t(u,[["render",h],["__file","7. \u91CD\u5EFA\u4E8C\u53C9\u6811.html.vue"]]);export{w as default};
