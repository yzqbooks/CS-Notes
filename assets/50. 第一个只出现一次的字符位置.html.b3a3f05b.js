import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as e,c as o,a as n,b as c,F as l,d as s,e as i}from"./app.d02315a2.js";const u={},r=n("h1",{id:"_50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u4F4D\u7F6E",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u4F4D\u7F6E","aria-hidden":"true"},"#"),s(" 50. \u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u4F4D\u7F6E")],-1),k=n("h2",{id:"\u9898\u76EE\u94FE\u63A5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898\u76EE\u94FE\u63A5","aria-hidden":"true"},"#"),s(" \u9898\u76EE\u94FE\u63A5")],-1),d={href:"https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c?tpId=13&tqId=11187&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github",target:"_blank",rel:"noopener noreferrer"},v=s("\u725B\u5BA2\u7F51"),m=i(`<h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h2><p>\u5728\u4E00\u4E2A\u5B57\u7B26\u4E32\u4E2D\u627E\u5230\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\uFF0C\u5E76\u8FD4\u56DE\u5B83\u7684\u4F4D\u7F6E\u3002\u5B57\u7B26\u4E32\u53EA\u5305\u542B ASCII \u7801\u5B57\u7B26\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: abacc
Output: b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a> \u89E3\u9898\u601D\u8DEF</h2><p>\u6700\u76F4\u89C2\u7684\u89E3\u6CD5\u662F\u4F7F\u7528 HashMap \u5BF9\u51FA\u73B0\u6B21\u6570\u8FDB\u884C\u7EDF\u8BA1\uFF1A\u5B57\u7B26\u505A\u4E3A key\uFF0C\u51FA\u73B0\u6B21\u6570\u4F5C\u4E3A value\uFF0C\u904D\u5386\u5B57\u7B26\u4E32\u6BCF\u6B21\u90FD\u5C06 key \u5BF9\u5E94\u7684 value \u52A0 1\u3002\u6700\u540E\u518D\u904D\u5386\u8FD9\u4E2A HashMap \u5C31\u53EF\u4EE5\u627E\u51FA\u51FA\u73B0\u6B21\u6570\u4E3A 1 \u7684\u5B57\u7B26\u3002</p><p>\u8003\u8651\u5230\u8981\u7EDF\u8BA1\u7684\u5B57\u7B26\u8303\u56F4\u6709\u9650\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528\u6574\u578B\u6570\u7EC4\u4EE3\u66FF HashMap\u3002ASCII \u7801\u53EA\u6709 128 \u4E2A\u5B57\u7B26\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528\u957F\u5EA6\u4E3A 128 \u7684\u6574\u578B\u6570\u7EC4\u6765\u5B58\u50A8\u6BCF\u4E2A\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">FirstNotRepeatingChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cnts<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnts<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE5\u4E0A\u5B9E\u73B0\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u8FD8\u4E0D\u662F\u6700\u4F18\u7684\u3002\u8003\u8651\u5230\u53EA\u9700\u8981\u627E\u5230\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\uFF0C\u90A3\u4E48\u9700\u8981\u7EDF\u8BA1\u7684\u6B21\u6570\u4FE1\u606F\u53EA\u6709 0,1,\u66F4\u5927\uFF0C\u4F7F\u7528\u4E24\u4E2A\u6BD4\u7279\u4F4D\u5C31\u80FD\u5B58\u50A8\u8FD9\u4E9B\u4FE1\u606F\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">FirstNotRepeatingChar2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BitSet</span> bs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BitSet</span> bs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bs1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bs2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
            bs1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 0 0 -&gt; 0 1</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bs1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bs2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
            bs2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 0 1 -&gt; 1 1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bs1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bs2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0 1</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function b(h,_){const a=p("ExternalLinkIcon");return e(),o(l,null,[r,k,n("p",null,[n("a",d,[v,c(a)])]),m],64)}var g=t(u,[["render",b],["__file","50. \u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26\u4F4D\u7F6E.html.vue"]]);export{g as default};
