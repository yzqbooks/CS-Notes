import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as l,a as n,b as e,F as i,e as t,d as s}from"./app.5ce5af5d.js";const u={},r=t(`<h1 id="leetcode-\u9898\u89E3-\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#leetcode-\u9898\u89E3-\u5B57\u7B26\u4E32" aria-hidden="true">#</a> Leetcode \u9898\u89E3 - \u5B57\u7B26\u4E32</h1><ul><li><a href="#leetcode-%E9%A2%98%E8%A7%A3---%E5%AD%97%E7%AC%A6%E4%B8%B2">Leetcode \u9898\u89E3 - \u5B57\u7B26\u4E32</a><ul><li><a href="#1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D%E5%8C%85%E5%90%AB">1. \u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D\u5305\u542B</a></li><li><a href="#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D">2. \u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D</a></li><li><a href="#3-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%8D%95%E8%AF%8D%E7%9A%84%E7%BF%BB%E8%BD%AC">3. \u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u7684\u7FFB\u8F6C</a></li><li><a href="#4-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB%E7%9A%84%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C">4. \u4E24\u4E2A\u5B57\u7B26\u4E32\u5305\u542B\u7684\u5B57\u7B26\u662F\u5426\u5B8C\u5168\u76F8\u540C</a></li><li><a href="#5-%E8%AE%A1%E7%AE%97%E4%B8%80%E7%BB%84%E5%AD%97%E7%AC%A6%E9%9B%86%E5%90%88%E5%8F%AF%E4%BB%A5%E7%BB%84%E6%88%90%E7%9A%84%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6">5. \u8BA1\u7B97\u4E00\u7EC4\u5B57\u7B26\u96C6\u5408\u53EF\u4EE5\u7EC4\u6210\u7684\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u6700\u5927\u957F\u5EA6</a></li><li><a href="#6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%8C%E6%9E%84">6. \u5B57\u7B26\u4E32\u540C\u6784</a></li><li><a href="#7-%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AA%E6%95%B0">7. \u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570</a></li><li><a href="#8-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E6%95%B0">8. \u5224\u65AD\u4E00\u4E2A\u6574\u6570\u662F\u5426\u662F\u56DE\u6587\u6570</a></li><li><a href="#9-%E7%BB%9F%E8%AE%A1%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BF%9E%E7%BB%AD-1-%E5%92%8C%E8%BF%9E%E7%BB%AD-0-%E6%95%B0%E9%87%8F%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AA%E6%95%B0">9. \u7EDF\u8BA1\u4E8C\u8FDB\u5236\u5B57\u7B26\u4E32\u4E2D\u8FDE\u7EED 1 \u548C\u8FDE\u7EED 0 \u6570\u91CF\u76F8\u540C\u7684\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570</a></li></ul></li></ul><h2 id="_1-\u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D\u5305\u542B" tabindex="-1"><a class="header-anchor" href="#_1-\u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D\u5305\u542B" aria-hidden="true">#</a> 1. \u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D\u5305\u542B</h2><p><a href="#">\u7F16\u7A0B\u4E4B\u7F8E 3.1</a></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>s1 = AABCD, s2 = CDAA
Return : true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32 s1 \u548C s2\uFF0C\u8981\u6C42\u5224\u5B9A s2 \u662F\u5426\u80FD\u591F\u88AB s1 \u505A\u5FAA\u73AF\u79FB\u4F4D\u5F97\u5230\u7684\u5B57\u7B26\u4E32\u5305\u542B\u3002</p><p>s1 \u8FDB\u884C\u5FAA\u73AF\u79FB\u4F4D\u7684\u7ED3\u679C\u662F s1s1 \u7684\u5B50\u5B57\u7B26\u4E32\uFF0C\u56E0\u6B64\u53EA\u8981\u5224\u65AD s2 \u662F\u5426\u662F s1s1 \u7684\u5B50\u5B57\u7B26\u4E32\u5373\u53EF\u3002</p><h2 id="_2-\u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D" tabindex="-1"><a class="header-anchor" href="#_2-\u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D" aria-hidden="true">#</a> 2. \u5B57\u7B26\u4E32\u5FAA\u73AF\u79FB\u4F4D</h2><p><a href="#">\u7F16\u7A0B\u4E4B\u7F8E 2.17</a></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>s = &quot;abcd123&quot; k = 3
Return &quot;123abcd&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5C06\u5B57\u7B26\u4E32\u5411\u53F3\u5FAA\u73AF\u79FB\u52A8 k \u4F4D\u3002</p><p>\u5C06 abcd123 \u4E2D\u7684 abcd \u548C 123 \u5355\u72EC\u7FFB\u8F6C\uFF0C\u5F97\u5230 dcba321\uFF0C\u7136\u540E\u5BF9\u6574\u4E2A\u5B57\u7B26\u4E32\u8FDB\u884C\u7FFB\u8F6C\uFF0C\u5F97\u5230 123abcd\u3002</p><h2 id="_3-\u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u7684\u7FFB\u8F6C" tabindex="-1"><a class="header-anchor" href="#_3-\u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u7684\u7FFB\u8F6C" aria-hidden="true">#</a> 3. \u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u7684\u7FFB\u8F6C</h2><p><a href="#">\u7A0B\u5E8F\u5458\u4EE3\u7801\u9762\u8BD5\u6307\u5357</a></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>s = &quot;I am a student&quot;
Return &quot;student a am I&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5C06\u6BCF\u4E2A\u5355\u8BCD\u7FFB\u8F6C\uFF0C\u7136\u540E\u5C06\u6574\u4E2A\u5B57\u7B26\u4E32\u7FFB\u8F6C\u3002</p><h2 id="_4-\u4E24\u4E2A\u5B57\u7B26\u4E32\u5305\u542B\u7684\u5B57\u7B26\u662F\u5426\u5B8C\u5168\u76F8\u540C" tabindex="-1"><a class="header-anchor" href="#_4-\u4E24\u4E2A\u5B57\u7B26\u4E32\u5305\u542B\u7684\u5B57\u7B26\u662F\u5426\u5B8C\u5168\u76F8\u540C" aria-hidden="true">#</a> 4. \u4E24\u4E2A\u5B57\u7B26\u4E32\u5305\u542B\u7684\u5B57\u7B26\u662F\u5426\u5B8C\u5168\u76F8\u540C</h2><p>242. Valid Anagram (Easy)</p>`,18),d={href:"https://leetcode.com/problems/valid-anagram/description/",target:"_blank",rel:"noopener noreferrer"},k=s("Leetcode"),v=s(" / "),m={href:"https://leetcode-cn.com/problems/valid-anagram/description/",target:"_blank",rel:"noopener noreferrer"},b=s("\u529B\u6263"),h=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>s = &quot;anagram&quot;, t = &quot;nagaram&quot;, return true.
s = &quot;rat&quot;, t = &quot;car&quot;, return false.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u7528 HashMap \u6765\u6620\u5C04\u5B57\u7B26\u4E0E\u51FA\u73B0\u6B21\u6570\uFF0C\u7136\u540E\u6BD4\u8F83\u4E24\u4E2A\u5B57\u7B26\u4E32\u51FA\u73B0\u7684\u5B57\u7B26\u6570\u91CF\u662F\u5426\u76F8\u540C\u3002</p><p>\u7531\u4E8E\u672C\u9898\u7684\u5B57\u7B26\u4E32\u53EA\u5305\u542B 26 \u4E2A\u5C0F\u5199\u5B57\u7B26\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528\u957F\u5EA6\u4E3A 26 \u7684\u6574\u578B\u6570\u7EC4\u5BF9\u5B57\u7B26\u4E32\u51FA\u73B0\u7684\u5B57\u7B26\u8FDB\u884C\u7EDF\u8BA1\uFF0C\u4E0D\u518D\u4F7F\u7528 HashMap\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cnts<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cnts<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cnt <span class="token operator">:</span> cnts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-\u8BA1\u7B97\u4E00\u7EC4\u5B57\u7B26\u96C6\u5408\u53EF\u4EE5\u7EC4\u6210\u7684\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u6700\u5927\u957F\u5EA6" tabindex="-1"><a class="header-anchor" href="#_5-\u8BA1\u7B97\u4E00\u7EC4\u5B57\u7B26\u96C6\u5408\u53EF\u4EE5\u7EC4\u6210\u7684\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u6700\u5927\u957F\u5EA6" aria-hidden="true">#</a> 5. \u8BA1\u7B97\u4E00\u7EC4\u5B57\u7B26\u96C6\u5408\u53EF\u4EE5\u7EC4\u6210\u7684\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u6700\u5927\u957F\u5EA6</h2><p>409. Longest Palindrome (Easy)</p>`,6),E={href:"https://leetcode.com/problems/longest-palindrome/description/",target:"_blank",rel:"noopener noreferrer"},_=s("Leetcode"),g=s(" / "),A={href:"https://leetcode-cn.com/problems/longest-palindrome/description/",target:"_blank",rel:"noopener noreferrer"},f=s("\u529B\u6263"),y=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input : &quot;abccccdd&quot;
Output : 7
Explanation : One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528\u957F\u5EA6\u4E3A 256 \u7684\u6574\u578B\u6570\u7EC4\u6765\u7EDF\u8BA1\u6BCF\u4E2A\u5B57\u7B26\u51FA\u73B0\u7684\u4E2A\u6570\uFF0C\u6BCF\u4E2A\u5B57\u7B26\u6709\u5076\u6570\u4E2A\u53EF\u4EE5\u7528\u6765\u6784\u6210\u56DE\u6587\u5B57\u7B26\u4E32\u3002</p><p>\u56E0\u4E3A\u56DE\u6587\u5B57\u7B26\u4E32\u6700\u4E2D\u95F4\u7684\u90A3\u4E2A\u5B57\u7B26\u53EF\u4EE5\u5355\u72EC\u51FA\u73B0\uFF0C\u6240\u4EE5\u5982\u679C\u6709\u5355\u72EC\u7684\u5B57\u7B26\u5C31\u628A\u5B83\u653E\u5230\u6700\u4E2D\u95F4\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cnts<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> palindrome <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cnt <span class="token operator">:</span> cnts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        palindrome <span class="token operator">+=</span> <span class="token punctuation">(</span>cnt <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>palindrome <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        palindrome<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// \u8FD9\u4E2A\u6761\u4EF6\u4E0B s \u4E2D\u4E00\u5B9A\u6709\u5355\u4E2A\u672A\u4F7F\u7528\u7684\u5B57\u7B26\u5B58\u5728\uFF0C\u53EF\u4EE5\u628A\u8FD9\u4E2A\u5B57\u7B26\u653E\u5230\u56DE\u6587\u7684\u6700\u4E2D\u95F4</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> palindrome<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-\u5B57\u7B26\u4E32\u540C\u6784" tabindex="-1"><a class="header-anchor" href="#_6-\u5B57\u7B26\u4E32\u540C\u6784" aria-hidden="true">#</a> 6. \u5B57\u7B26\u4E32\u540C\u6784</h2><p>205. Isomorphic Strings (Easy)</p>`,6),B={href:"https://leetcode.com/problems/isomorphic-strings/description/",target:"_blank",rel:"noopener noreferrer"},w=s("Leetcode"),q=s(" / "),x={href:"https://leetcode-cn.com/problems/isomorphic-strings/description/",target:"_blank",rel:"noopener noreferrer"},C=s("\u529B\u6263"),D=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given &quot;egg&quot;, &quot;add&quot;, return true.
Given &quot;foo&quot;, &quot;bar&quot;, return false.
Given &quot;paper&quot;, &quot;title&quot;, return true.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BB0\u5F55\u4E00\u4E2A\u5B57\u7B26\u4E0A\u6B21\u51FA\u73B0\u7684\u4F4D\u7F6E\uFF0C\u5982\u679C\u4E24\u4E2A\u5B57\u7B26\u4E32\u4E2D\u7684\u5B57\u7B26\u4E0A\u6B21\u51FA\u73B0\u7684\u4F4D\u7F6E\u4E00\u6837\uFF0C\u90A3\u4E48\u5C31\u5C5E\u4E8E\u540C\u6784\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preIndexOfS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preIndexOfT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> sc <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> tc <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preIndexOfS<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">!=</span> preIndexOfT<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        preIndexOfS<span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        preIndexOfT<span class="token punctuation">[</span>tc<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-\u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_7-\u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570" aria-hidden="true">#</a> 7. \u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570</h2><p>647. Palindromic Substrings (Medium)</p>`,5),L={href:"https://leetcode.com/problems/palindromic-substrings/description/",target:"_blank",rel:"noopener noreferrer"},S=s("Leetcode"),j=s(" / "),F={href:"https://leetcode-cn.com/problems/palindromic-substrings/description/",target:"_blank",rel:"noopener noreferrer"},I=s("\u529B\u6263"),O=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: &quot;aaa&quot;
Output: 6
Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECE\u5B57\u7B26\u4E32\u7684\u67D0\u4E00\u4F4D\u5F00\u59CB\uFF0C\u5C1D\u8BD5\u7740\u53BB\u6269\u5C55\u5B50\u5B57\u7B26\u4E32\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">extendSubstrings</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// \u5947\u6570\u957F\u5EA6</span>
        <span class="token function">extendSubstrings</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5076\u6570\u957F\u5EA6</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">extendSubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        start<span class="token operator">--</span><span class="token punctuation">;</span>
        end<span class="token operator">++</span><span class="token punctuation">;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-\u5224\u65AD\u4E00\u4E2A\u6574\u6570\u662F\u5426\u662F\u56DE\u6587\u6570" tabindex="-1"><a class="header-anchor" href="#_8-\u5224\u65AD\u4E00\u4E2A\u6574\u6570\u662F\u5426\u662F\u56DE\u6587\u6570" aria-hidden="true">#</a> 8. \u5224\u65AD\u4E00\u4E2A\u6574\u6570\u662F\u5426\u662F\u56DE\u6587\u6570</h2><p>9. Palindrome Number (Easy)</p>`,5),N={href:"https://leetcode.com/problems/palindrome-number/description/",target:"_blank",rel:"noopener noreferrer"},P=s("Leetcode"),T=s(" / "),V={href:"https://leetcode-cn.com/problems/palindrome-number/description/",target:"_blank",rel:"noopener noreferrer"},G=s("\u529B\u6263"),M=t(`<p>\u8981\u6C42\u4E0D\u80FD\u4F7F\u7528\u989D\u5916\u7A7A\u95F4\uFF0C\u4E5F\u5C31\u4E0D\u80FD\u5C06\u6574\u6570\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\u8FDB\u884C\u5224\u65AD\u3002</p><p>\u5C06\u6574\u6570\u5206\u6210\u5DE6\u53F3\u4E24\u90E8\u5206\uFF0C\u53F3\u8FB9\u90A3\u90E8\u5206\u9700\u8981\u8F6C\u7F6E\uFF0C\u7136\u540E\u5224\u65AD\u8FD9\u4E24\u90E8\u5206\u662F\u5426\u76F8\u7B49\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right <span class="token operator">=</span> right <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x <span class="token operator">==</span> right <span class="token operator">||</span> x <span class="token operator">==</span> right <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-\u7EDF\u8BA1\u4E8C\u8FDB\u5236\u5B57\u7B26\u4E32\u4E2D\u8FDE\u7EED-1-\u548C\u8FDE\u7EED-0-\u6570\u91CF\u76F8\u540C\u7684\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_9-\u7EDF\u8BA1\u4E8C\u8FDB\u5236\u5B57\u7B26\u4E32\u4E2D\u8FDE\u7EED-1-\u548C\u8FDE\u7EED-0-\u6570\u91CF\u76F8\u540C\u7684\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570" aria-hidden="true">#</a> 9. \u7EDF\u8BA1\u4E8C\u8FDB\u5236\u5B57\u7B26\u4E32\u4E2D\u8FDE\u7EED 1 \u548C\u8FDE\u7EED 0 \u6570\u91CF\u76F8\u540C\u7684\u5B50\u5B57\u7B26\u4E32\u4E2A\u6570</h2><p>696. Count Binary Substrings (Easy)</p>`,5),R={href:"https://leetcode.com/problems/count-binary-substrings/description/",target:"_blank",rel:"noopener noreferrer"},H=s("Leetcode"),z=s(" / "),J={href:"https://leetcode-cn.com/problems/count-binary-substrings/description/",target:"_blank",rel:"noopener noreferrer"},K=s("\u529B\u6263"),Q=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: &quot;00110011&quot;
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1&#39;s and 0&#39;s: &quot;0011&quot;, &quot;01&quot;, &quot;1100&quot;, &quot;10&quot;, &quot;0011&quot;, and &quot;01&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> preLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> curLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            curLen<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            preLen <span class="token operator">=</span> curLen<span class="token punctuation">;</span>
            curLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>preLen <span class="token operator">&gt;=</span> curLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function U(W,X){const a=o("ExternalLinkIcon");return c(),l(i,null,[r,n("p",null,[n("a",d,[k,e(a)]),v,n("a",m,[b,e(a)])]),h,n("p",null,[n("a",E,[_,e(a)]),g,n("a",A,[f,e(a)])]),y,n("p",null,[n("a",B,[w,e(a)]),q,n("a",x,[C,e(a)])]),D,n("p",null,[n("a",L,[S,e(a)]),j,n("a",F,[I,e(a)])]),O,n("p",null,[n("a",N,[P,e(a)]),T,n("a",V,[G,e(a)])]),M,n("p",null,[n("a",R,[H,e(a)]),z,n("a",J,[K,e(a)])]),Q],64)}var $=p(u,[["render",U],["__file","Leetcode \u9898\u89E3 - \u5B57\u7B26\u4E32.html.vue"]]);export{$ as default};
