import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as l,a as n,b as p,F as i,e as t,d as s}from"./app.5ce5af5d.js";const u={},k=t('<h1 id="leetcode-\u9898\u89E3-\u56FE" tabindex="-1"><a class="header-anchor" href="#leetcode-\u9898\u89E3-\u56FE" aria-hidden="true">#</a> Leetcode \u9898\u89E3 - \u56FE</h1><ul><li><a href="#leetcode-%E9%A2%98%E8%A7%A3---%E5%9B%BE">Leetcode \u9898\u89E3 - \u56FE</a><ul><li><a href="#%E4%BA%8C%E5%88%86%E5%9B%BE">\u4E8C\u5206\u56FE</a><ul><li><a href="#1-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E4%BA%8C%E5%88%86%E5%9B%BE">1. \u5224\u65AD\u662F\u5426\u4E3A\u4E8C\u5206\u56FE</a></li></ul></li><li><a href="#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">\u62D3\u6251\u6392\u5E8F</a><ul><li><a href="#1-%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92%E7%9A%84%E5%90%88%E6%B3%95%E6%80%A7">1. \u8BFE\u7A0B\u5B89\u6392\u7684\u5408\u6CD5\u6027</a></li><li><a href="#2-%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92%E7%9A%84%E9%A1%BA%E5%BA%8F">2. \u8BFE\u7A0B\u5B89\u6392\u7684\u987A\u5E8F</a></li></ul></li><li><a href="#%E5%B9%B6%E6%9F%A5%E9%9B%86">\u5E76\u67E5\u96C6</a><ul><li><a href="#1-%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5">1. \u5197\u4F59\u8FDE\u63A5</a></li></ul></li></ul></li></ul><h2 id="\u4E8C\u5206\u56FE" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u56FE" aria-hidden="true">#</a> \u4E8C\u5206\u56FE</h2><p>\u5982\u679C\u53EF\u4EE5\u7528\u4E24\u79CD\u989C\u8272\u5BF9\u56FE\u4E2D\u7684\u8282\u70B9\u8FDB\u884C\u7740\u8272\uFF0C\u5E76\u4E14\u4FDD\u8BC1\u76F8\u90BB\u7684\u8282\u70B9\u989C\u8272\u4E0D\u540C\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u56FE\u5C31\u662F\u4E8C\u5206\u56FE\u3002</p><h3 id="_1-\u5224\u65AD\u662F\u5426\u4E3A\u4E8C\u5206\u56FE" tabindex="-1"><a class="header-anchor" href="#_1-\u5224\u65AD\u662F\u5426\u4E3A\u4E8C\u5206\u56FE" aria-hidden="true">#</a> 1. \u5224\u65AD\u662F\u5426\u4E3A\u4E8C\u5206\u56FE</h3><p>785. Is Graph Bipartite? (Medium)</p>',6),r={href:"https://leetcode.com/problems/is-graph-bipartite/description/",target:"_blank",rel:"noopener noreferrer"},d=s("Leetcode"),v=s(" / "),m={href:"https://leetcode-cn.com/problems/is-graph-bipartite/description/",target:"_blank",rel:"noopener noreferrer"},b=s("\u529B\u6263"),h=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation:
The graph looks like this:
0----1
|    |
|    |
3----2
We can divide the vertices into two groups: {0, 2} and {1, 3}.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Example 2:
Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation:
The graph looks like this:
0----1
| \\  |
|  \\ |
3----2
We cannot find a way to divide the set of nodes into two independent subsets.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5904\u7406\u56FE\u4E0D\u662F\u8FDE\u901A\u7684\u60C5\u51B5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isBipartite</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> colors<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span> curNode<span class="token punctuation">,</span> <span class="token keyword">int</span> curColor<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> colors<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">==</span> curColor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    colors<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> curColor<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> nextNode <span class="token operator">:</span> graph<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isBipartite</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> curColor<span class="token punctuation">,</span> colors<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u62D3\u6251\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u62D3\u6251\u6392\u5E8F" aria-hidden="true">#</a> \u62D3\u6251\u6392\u5E8F</h2><p>\u5E38\u7528\u4E8E\u5728\u5177\u6709\u5148\u5E8F\u5173\u7CFB\u7684\u4EFB\u52A1\u89C4\u5212\u4E2D\u3002</p><h3 id="_1-\u8BFE\u7A0B\u5B89\u6392\u7684\u5408\u6CD5\u6027" tabindex="-1"><a class="header-anchor" href="#_1-\u8BFE\u7A0B\u5B89\u6392\u7684\u5408\u6CD5\u6027" aria-hidden="true">#</a> 1. \u8BFE\u7A0B\u5B89\u6392\u7684\u5408\u6CD5\u6027</h3><p>207. Course Schedule (Medium)</p>`,7),w={href:"https://leetcode.com/problems/course-schedule/description/",target:"_blank",rel:"noopener noreferrer"},y=s("Leetcode"),f=s(" / "),g={href:"https://leetcode-cn.com/problems/course-schedule/description/",target:"_blank",rel:"noopener noreferrer"},_=s("\u529B\u6263"),E=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>2, [[1,0]]
return true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>2, [[1,0],[0,1]]
return false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u4E00\u4E2A\u8BFE\u7A0B\u53EF\u80FD\u4F1A\u5148\u4FEE\u8BFE\u7A0B\uFF0C\u5224\u65AD\u7ED9\u5B9A\u7684\u5148\u4FEE\u8BFE\u7A0B\u89C4\u5B9A\u662F\u5426\u5408\u6CD5\u3002</p><p>\u672C\u9898\u4E0D\u9700\u8981\u4F7F\u7528\u62D3\u6251\u6392\u5E8F\uFF0C\u53EA\u9700\u8981\u68C0\u6D4B\u6709\u5411\u56FE\u662F\u5426\u5B58\u5728\u73AF\u5373\u53EF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        graphic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        graphic<span class="token punctuation">[</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> globalMarked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localMarked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span>globalMarked<span class="token punctuation">,</span> localMarked<span class="token punctuation">,</span> graphic<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> globalMarked<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localMarked<span class="token punctuation">,</span>
                         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphic<span class="token punctuation">,</span> <span class="token keyword">int</span> curNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    globalMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> nextNode <span class="token operator">:</span> graphic<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span>globalMarked<span class="token punctuation">,</span> localMarked<span class="token punctuation">,</span> graphic<span class="token punctuation">,</span> nextNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u8BFE\u7A0B\u5B89\u6392\u7684\u987A\u5E8F" tabindex="-1"><a class="header-anchor" href="#_2-\u8BFE\u7A0B\u5B89\u6392\u7684\u987A\u5E8F" aria-hidden="true">#</a> 2. \u8BFE\u7A0B\u5B89\u6392\u7684\u987A\u5E8F</h3><p>210. Course Schedule II (Medium)</p>`,7),x={href:"https://leetcode.com/problems/course-schedule-ii/description/",target:"_blank",rel:"noopener noreferrer"},N=s("Leetcode"),B=s(" / "),C={href:"https://leetcode-cn.com/problems/course-schedule-ii/description/",target:"_blank",rel:"noopener noreferrer"},M=s("\u529B\u6263"),A=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>4, [[1,0],[2,0],[3,1],[3,2]]
There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528 DFS \u6765\u5B9E\u73B0\u62D3\u6251\u6392\u5E8F\uFF0C\u4F7F\u7528\u4E00\u4E2A\u6808\u5B58\u50A8\u540E\u5E8F\u904D\u5386\u7ED3\u679C\uFF0C\u8FD9\u4E2A\u6808\u7684\u9006\u5E8F\u7ED3\u679C\u5C31\u662F\u62D3\u6251\u6392\u5E8F\u7ED3\u679C\u3002</p><p>\u8BC1\u660E\uFF1A\u5BF9\u4E8E\u4EFB\u4F55\u5148\u5E8F\u5173\u7CFB\uFF1Av-&gt;w\uFF0C\u540E\u5E8F\u904D\u5386\u7ED3\u679C\u53EF\u4EE5\u4FDD\u8BC1 w \u5148\u8FDB\u5165\u6808\u4E2D\uFF0C\u56E0\u6B64\u6808\u7684\u9006\u5E8F\u7ED3\u679C\u4E2D v \u4F1A\u5728 w \u4E4B\u524D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        graphic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        graphic<span class="token punctuation">[</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> postOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> globalMarked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localMarked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span>globalMarked<span class="token punctuation">,</span> localMarked<span class="token punctuation">,</span> graphic<span class="token punctuation">,</span> i<span class="token punctuation">,</span> postOrder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numCourses <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> postOrder<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> orders<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> globalMarked<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localMarked<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphic<span class="token punctuation">,</span>
                         <span class="token keyword">int</span> curNode<span class="token punctuation">,</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> postOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>globalMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    globalMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> nextNode <span class="token operator">:</span> graphic<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span>globalMarked<span class="token punctuation">,</span> localMarked<span class="token punctuation">,</span> graphic<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> postOrder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    localMarked<span class="token punctuation">[</span>curNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    postOrder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E76\u67E5\u96C6" tabindex="-1"><a class="header-anchor" href="#\u5E76\u67E5\u96C6" aria-hidden="true">#</a> \u5E76\u67E5\u96C6</h2><p>\u5E76\u67E5\u96C6\u53EF\u4EE5\u52A8\u6001\u5730\u8FDE\u901A\u4E24\u4E2A\u70B9\uFF0C\u5E76\u4E14\u53EF\u4EE5\u975E\u5E38\u5FEB\u901F\u5730\u5224\u65AD\u4E24\u4E2A\u70B9\u662F\u5426\u8FDE\u901A\u3002</p><h3 id="_1-\u5197\u4F59\u8FDE\u63A5" tabindex="-1"><a class="header-anchor" href="#_1-\u5197\u4F59\u8FDE\u63A5" aria-hidden="true">#</a> 1. \u5197\u4F59\u8FDE\u63A5</h3><p>684. Redundant Connection (Medium)</p>`,8),I={href:"https://leetcode.com/problems/redundant-connection/description/",target:"_blank",rel:"noopener noreferrer"},L=s("Leetcode"),F=s(" / "),j={href:"https://leetcode-cn.com/problems/redundant-connection/description/",target:"_blank",rel:"noopener noreferrer"},O=s("\u529B\u6263"),D=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \\
2 - 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u6709\u4E00\u7CFB\u5217\u7684\u8FB9\u8FDE\u6210\u7684\u56FE\uFF0C\u627E\u51FA\u4E00\u6761\u8FB9\uFF0C\u79FB\u9664\u5B83\u4E4B\u540E\u8BE5\u56FE\u80FD\u591F\u6210\u4E3A\u4E00\u68F5\u6811\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRedundantConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> edges<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token class-name">UF</span> uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UF</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>

    <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> uID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> vID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uID <span class="token operator">==</span> vID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> uID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vID<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function S(T,q){const a=o("ExternalLinkIcon");return c(),l(i,null,[k,n("p",null,[n("a",r,[d,p(a)]),v,n("a",m,[b,p(a)])]),h,n("p",null,[n("a",w,[y,p(a)]),f,n("a",g,[_,p(a)])]),E,n("p",null,[n("a",x,[N,p(a)]),B,n("a",C,[M,p(a)])]),A,n("p",null,[n("a",I,[L,p(a)]),F,n("a",j,[O,p(a)])]),D],64)}var R=e(u,[["render",S],["__file","Leetcode \u9898\u89E3 - \u56FE.html.vue"]]);export{R as default};
