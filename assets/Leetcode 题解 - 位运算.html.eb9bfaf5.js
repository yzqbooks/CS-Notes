import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as i,a as n,b as e,F as l,e as t,d as s}from"./app.d02315a2.js";const r={},u=t(`<h1 id="leetcode-\u9898\u89E3-\u4F4D\u8FD0\u7B97" tabindex="-1"><a class="header-anchor" href="#leetcode-\u9898\u89E3-\u4F4D\u8FD0\u7B97" aria-hidden="true">#</a> Leetcode \u9898\u89E3 - \u4F4D\u8FD0\u7B97</h1><ul><li><a href="#leetcode-%E9%A2%98%E8%A7%A3---%E4%BD%8D%E8%BF%90%E7%AE%97">Leetcode \u9898\u89E3 - \u4F4D\u8FD0\u7B97</a><ul><li><a href="#0-%E5%8E%9F%E7%90%86">0. \u539F\u7406</a></li><li><a href="#1-%E7%BB%9F%E8%AE%A1%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%9C%89%E5%A4%9A%E5%B0%91%E4%BD%8D%E4%B8%8D%E5%90%8C">1. \u7EDF\u8BA1\u4E24\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u6709\u591A\u5C11\u4F4D\u4E0D\u540C</a></li><li><a href="#2-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%94%AF%E4%B8%80%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">2. \u6570\u7EC4\u4E2D\u552F\u4E00\u4E00\u4E2A\u4E0D\u91CD\u590D\u7684\u5143\u7D20</a></li><li><a href="#3-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E4%B8%AA%E6%95%B0">3. \u627E\u51FA\u6570\u7EC4\u4E2D\u7F3A\u5931\u7684\u90A3\u4E2A\u6570</a></li><li><a href="#4-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0">4. \u6570\u7EC4\u4E2D\u4E0D\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20</a></li><li><a href="#5-%E7%BF%BB%E8%BD%AC%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E6%AF%94%E7%89%B9%E4%BD%8D">5. \u7FFB\u8F6C\u4E00\u4E2A\u6570\u7684\u6BD4\u7279\u4F4D</a></li><li><a href="#6-%E4%B8%8D%E7%94%A8%E9%A2%9D%E5%A4%96%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0">6. \u4E0D\u7528\u989D\u5916\u53D8\u91CF\u4EA4\u6362\u4E24\u4E2A\u6574\u6570</a></li><li><a href="#7-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E6%98%AF%E4%B8%8D%E6%98%AF-2-%E7%9A%84-n-%E6%AC%A1%E6%96%B9">7. \u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F 2 \u7684 n \u6B21\u65B9</a></li><li><a href="#8--%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E6%98%AF%E4%B8%8D%E6%98%AF-4-%E7%9A%84-n-%E6%AC%A1%E6%96%B9">8. \u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F 4 \u7684 n \u6B21\u65B9</a></li><li><a href="#9-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E4%BD%8D%E7%BA%A7%E8%A1%A8%E7%A4%BA%E6%98%AF%E5%90%A6%E4%B8%8D%E4%BC%9A%E5%87%BA%E7%8E%B0%E8%BF%9E%E7%BB%AD%E7%9A%84-0-%E5%92%8C-1">9. \u5224\u65AD\u4E00\u4E2A\u6570\u7684\u4F4D\u7EA7\u8868\u793A\u662F\u5426\u4E0D\u4F1A\u51FA\u73B0\u8FDE\u7EED\u7684 0 \u548C 1</a></li><li><a href="#10-%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E8%A1%A5%E7%A0%81">10. \u6C42\u4E00\u4E2A\u6570\u7684\u8865\u7801</a></li><li><a href="#11-%E5%AE%9E%E7%8E%B0%E6%95%B4%E6%95%B0%E7%9A%84%E5%8A%A0%E6%B3%95">11. \u5B9E\u73B0\u6574\u6570\u7684\u52A0\u6CD5</a></li><li><a href="#12-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF">12. \u5B57\u7B26\u4E32\u6570\u7EC4\u6700\u5927\u4E58\u79EF</a></li><li><a href="#13-%E7%BB%9F%E8%AE%A1%E4%BB%8E-0-~-n-%E6%AF%8F%E4%B8%AA%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD-1-%E7%9A%84%E4%B8%AA%E6%95%B0">13. \u7EDF\u8BA1\u4ECE 0 ~ n \u6BCF\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D 1 \u7684\u4E2A\u6570</a></li></ul></li></ul><h2 id="_0-\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#_0-\u539F\u7406" aria-hidden="true">#</a> 0. \u539F\u7406</h2><p><strong>\u57FA\u672C\u539F\u7406</strong></p><p>0s \u8868\u793A\u4E00\u4E32 0\uFF0C1s \u8868\u793A\u4E00\u4E32 1\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>x ^ 0s = x      x &amp; 0s = 0      x | 0s = x
x ^ 1s = ~x     x &amp; 1s = x      x | 1s = 1s
x ^ x = 0       x &amp; x = x       x | x = x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5229\u7528 x ^ 1s = ~x \u7684\u7279\u70B9\uFF0C\u53EF\u4EE5\u5C06\u4E00\u4E2A\u6570\u7684\u4F4D\u7EA7\u8868\u793A\u7FFB\u8F6C\uFF1B\u5229\u7528 x ^ x = 0 \u7684\u7279\u70B9\uFF0C\u53EF\u4EE5\u5C06\u4E09\u4E2A\u6570\u4E2D\u91CD\u590D\u7684\u4E24\u4E2A\u6570\u53BB\u9664\uFF0C\u53EA\u7559\u4E0B\u53E6\u4E00\u4E2A\u6570\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1^1^2 = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5229\u7528 x &amp; 0s = 0 \u548C x &amp; 1s = x \u7684\u7279\u70B9\uFF0C\u53EF\u4EE5\u5B9E\u73B0\u63A9\u7801\u64CD\u4F5C\u3002\u4E00\u4E2A\u6570 num \u4E0E mask\uFF1A00111100 \u8FDB\u884C\u4F4D\u4E0E\u64CD\u4F5C\uFF0C\u53EA\u4FDD\u7559 num \u4E2D\u4E0E mask \u7684 1 \u90E8\u5206\u76F8\u5BF9\u5E94\u7684\u4F4D\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>01011011 &amp;
00111100
--------
00011000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5229\u7528 x | 0s = x \u548C x | 1s = 1s \u7684\u7279\u70B9\uFF0C\u53EF\u4EE5\u5B9E\u73B0\u8BBE\u503C\u64CD\u4F5C\u3002\u4E00\u4E2A\u6570 num \u4E0E mask\uFF1A00111100 \u8FDB\u884C\u4F4D\u6216\u64CD\u4F5C\uFF0C\u5C06 num \u4E2D\u4E0E mask \u7684 1 \u90E8\u5206\u76F8\u5BF9\u5E94\u7684\u4F4D\u90FD\u8BBE\u7F6E\u4E3A 1\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>01011011 |
00111100
--------
01111111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4F4D\u4E0E\u8FD0\u7B97\u6280\u5DE7</strong></p><p>n&amp;(n-1) \u53BB\u9664 n \u7684\u4F4D\u7EA7\u8868\u793A\u4E2D\u6700\u4F4E\u7684\u90A3\u4E00\u4F4D 1\u3002\u4F8B\u5982\u5BF9\u4E8E\u4E8C\u8FDB\u5236\u8868\u793A 01011011\uFF0C\u51CF\u53BB 1 \u5F97\u5230 01011010\uFF0C\u8FD9\u4E24\u4E2A\u6570\u76F8\u4E0E\u5F97\u5230 01011010\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>01011011 &amp;
01011010
--------
01011010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>n&amp;(-n) \u5F97\u5230 n \u7684\u4F4D\u7EA7\u8868\u793A\u4E2D\u6700\u4F4E\u7684\u90A3\u4E00\u4F4D 1\u3002-n \u5F97\u5230 n \u7684\u53CD\u7801\u52A0 1\uFF0C\u4E5F\u5C31\u662F -n=~n+1\u3002\u4F8B\u5982\u5BF9\u4E8E\u4E8C\u8FDB\u5236\u8868\u793A 10110100\uFF0C-n \u5F97\u5230 01001100\uFF0C\u76F8\u4E0E\u5F97\u5230 00000100\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>10110100 &amp;
01001100
--------
00000100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>n-(n&amp;(-n)) \u5219\u53EF\u4EE5\u53BB\u9664 n \u7684\u4F4D\u7EA7\u8868\u793A\u4E2D\u6700\u4F4E\u7684\u90A3\u4E00\u4F4D 1\uFF0C\u548C n&amp;(n-1) \u6548\u679C\u4E00\u6837\u3002</p><p><strong>\u79FB\u4F4D\u8FD0\u7B97</strong></p><p>\\&gt;\\&gt; n \u4E3A\u7B97\u672F\u53F3\u79FB\uFF0C\u76F8\u5F53\u4E8E\u9664\u4EE5 2n\uFF0C\u4F8B\u5982 -7 \\&gt;\\&gt; 2 = -2\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>11111111111111111111111111111001  &gt;&gt; 2
--------
11111111111111111111111111111110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\\&gt;\\&gt;\\&gt; n \u4E3A\u65E0\u7B26\u53F7\u53F3\u79FB\uFF0C\u5DE6\u8FB9\u4F1A\u8865\u4E0A 0\u3002\u4F8B\u5982 -7 \\&gt;\\&gt;\\&gt; 2 = 1073741822\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>11111111111111111111111111111001  &gt;&gt;&gt; 2
--------
00111111111111111111111111111111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;&lt; n \u4E3A\u7B97\u672F\u5DE6\u79FB\uFF0C\u76F8\u5F53\u4E8E\u4E58\u4EE5 2n\u3002-7 &lt;&lt; 2 = -28\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>11111111111111111111111111111001  &lt;&lt; 2
--------
11111111111111111111111111100100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>mask \u8BA1\u7B97</strong></p><p>\u8981\u83B7\u53D6 111111111\uFF0C\u5C06 0 \u53D6\u53CD\u5373\u53EF\uFF0C~0\u3002</p><p>\u8981\u5F97\u5230\u53EA\u6709\u7B2C i \u4F4D\u4E3A 1 \u7684 mask\uFF0C\u5C06 1 \u5411\u5DE6\u79FB\u52A8 i-1 \u4F4D\u5373\u53EF\uFF0C1&lt;&lt;(i-1) \u3002\u4F8B\u5982 1&lt;&lt;4 \u5F97\u5230\u53EA\u6709\u7B2C 5 \u4F4D\u4E3A 1 \u7684 mask \uFF1A00010000\u3002</p><p>\u8981\u5F97\u5230 1 \u5230 i \u4F4D\u4E3A 1 \u7684 mask\uFF0C(1&lt;&lt;i)-1 \u5373\u53EF\uFF0C\u4F8B\u5982\u5C06 (1&lt;&lt;4)-1 = 00010000-1 = 00001111\u3002</p><p>\u8981\u5F97\u5230 1 \u5230 i \u4F4D\u4E3A 0 \u7684 mask\uFF0C\u53EA\u9700\u5C06 1 \u5230 i \u4F4D\u4E3A 1 \u7684 mask \u53D6\u53CD\uFF0C\u5373 ~((1&lt;&lt;i)-1)\u3002</p><p><strong>Java \u4E2D\u7684\u4F4D\u64CD\u4F5C</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>static int Integer.bitCount();           // \u7EDF\u8BA1 1 \u7684\u6570\u91CF
static int Integer.highestOneBit();      // \u83B7\u5F97\u6700\u9AD8\u4F4D
static String toBinaryString(int i);     // \u8F6C\u6362\u4E3A\u4E8C\u8FDB\u5236\u8868\u793A\u7684\u5B57\u7B26\u4E32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-\u7EDF\u8BA1\u4E24\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u6709\u591A\u5C11\u4F4D\u4E0D\u540C" tabindex="-1"><a class="header-anchor" href="#_1-\u7EDF\u8BA1\u4E24\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u6709\u591A\u5C11\u4F4D\u4E0D\u540C" aria-hidden="true">#</a> 1. \u7EDF\u8BA1\u4E24\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u6709\u591A\u5C11\u4F4D\u4E0D\u540C</h2><ol start="461"><li>Hamming Distance (Easy)</li></ol>`,34),d={href:"https://leetcode.com/problems/hamming-distance/",target:"_blank",rel:"noopener noreferrer"},k=s("Leetcode"),m=s(" / "),v={href:"https://leetcode-cn.com/problems/hamming-distance/",target:"_blank",rel:"noopener noreferrer"},b=s("\u529B\u6263"),h=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       \u2191   \u2191

The above arrows point to positions where the corresponding bits are different.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E24\u4E2A\u6570\u8FDB\u884C\u5F02\u6216\u64CD\u4F5C\uFF0C\u4F4D\u7EA7\u8868\u793A\u4E0D\u540C\u7684\u90A3\u4E00\u4F4D\u4E3A 1\uFF0C\u7EDF\u8BA1\u6709\u591A\u5C11\u4E2A 1 \u5373\u53EF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>z <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        z <span class="token operator">=</span> z <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528 z&amp;(z-1) \u53BB\u9664 z \u4F4D\u7EA7\u8868\u793A\u6700\u4F4E\u7684\u90A3\u4E00\u4F4D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>z <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        z <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u4F7F\u7528 Integer.bitcount() \u6765\u7EDF\u8BA1 1 \u4E2A\u7684\u4E2A\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u6570\u7EC4\u4E2D\u552F\u4E00\u4E00\u4E2A\u4E0D\u91CD\u590D\u7684\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_2-\u6570\u7EC4\u4E2D\u552F\u4E00\u4E00\u4E2A\u4E0D\u91CD\u590D\u7684\u5143\u7D20" aria-hidden="true">#</a> 2. \u6570\u7EC4\u4E2D\u552F\u4E00\u4E00\u4E2A\u4E0D\u91CD\u590D\u7684\u5143\u7D20</h2><p>136. Single Number (Easy)</p>`,9),g={href:"https://leetcode.com/problems/single-number/description/",target:"_blank",rel:"noopener noreferrer"},_=s("Leetcode"),w=s(" / "),E={href:"https://leetcode-cn.com/problems/single-number/description/",target:"_blank",rel:"noopener noreferrer"},f=s("\u529B\u6263"),y=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: [4,1,2,1,2]
Output: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E24\u4E2A\u76F8\u540C\u7684\u6570\u5F02\u6216\u7684\u7ED3\u679C\u4E3A 0\uFF0C\u5BF9\u6240\u6709\u6570\u8FDB\u884C\u5F02\u6216\u64CD\u4F5C\uFF0C\u6700\u540E\u7684\u7ED3\u679C\u5C31\u662F\u5355\u72EC\u51FA\u73B0\u7684\u90A3\u4E2A\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">^</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-\u627E\u51FA\u6570\u7EC4\u4E2D\u7F3A\u5931\u7684\u90A3\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_3-\u627E\u51FA\u6570\u7EC4\u4E2D\u7F3A\u5931\u7684\u90A3\u4E2A\u6570" aria-hidden="true">#</a> 3. \u627E\u51FA\u6570\u7EC4\u4E2D\u7F3A\u5931\u7684\u90A3\u4E2A\u6570</h2><p>268. Missing Number (Easy)</p>`,5),x={href:"https://leetcode.com/problems/missing-number/description/",target:"_blank",rel:"noopener noreferrer"},B=s("Leetcode"),A=s(" / "),j={href:"https://leetcode-cn.com/problems/missing-number/description/",target:"_blank",rel:"noopener noreferrer"},D=s("\u529B\u6263"),F=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: [3,0,1]
Output: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u6570\u7EC4\u5143\u7D20\u5728 0-n \u4E4B\u95F4\uFF0C\u4F46\u662F\u6709\u4E00\u4E2A\u6570\u662F\u7F3A\u5931\u7684\uFF0C\u8981\u6C42\u627E\u5230\u8FD9\u4E2A\u7F3A\u5931\u7684\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> ret <span class="token operator">^</span> i <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret <span class="token operator">^</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-\u6570\u7EC4\u4E2D\u4E0D\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_4-\u6570\u7EC4\u4E2D\u4E0D\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20" aria-hidden="true">#</a> 4. \u6570\u7EC4\u4E2D\u4E0D\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20</h2><p>260. Single Number III (Medium)</p>`,5),C={href:"https://leetcode.com/problems/single-number-iii/description/",target:"_blank",rel:"noopener noreferrer"},I=s("Leetcode"),L=s(" / "),q={href:"https://leetcode-cn.com/problems/single-number-iii/description/",target:"_blank",rel:"noopener noreferrer"},z=s("\u529B\u6263"),O=t(`<p>\u4E24\u4E2A\u4E0D\u76F8\u7B49\u7684\u5143\u7D20\u5728\u4F4D\u7EA7\u8868\u793A\u4E0A\u5FC5\u5B9A\u4F1A\u6709\u4E00\u4F4D\u5B58\u5728\u4E0D\u540C\u3002</p><p>\u5C06\u6570\u7EC4\u7684\u6240\u6709\u5143\u7D20\u5F02\u6216\u5F97\u5230\u7684\u7ED3\u679C\u4E3A\u4E0D\u5B58\u5728\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20\u5F02\u6216\u7684\u7ED3\u679C\u3002</p><p>diff &amp;= -diff \u5F97\u5230\u51FA diff \u6700\u53F3\u4FA7\u4E0D\u4E3A 0 \u7684\u4F4D\uFF0C\u4E5F\u5C31\u662F\u4E0D\u5B58\u5728\u91CD\u590D\u7684\u4E24\u4E2A\u5143\u7D20\u5728\u4F4D\u7EA7\u8868\u793A\u4E0A\u6700\u53F3\u4FA7\u4E0D\u540C\u7684\u90A3\u4E00\u4F4D\uFF0C\u5229\u7528\u8FD9\u4E00\u4F4D\u5C31\u53EF\u4EE5\u5C06\u4E24\u4E2A\u5143\u7D20\u533A\u5206\u5F00\u6765\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> diff <span class="token operator">^=</span> num<span class="token punctuation">;</span>
    diff <span class="token operator">&amp;=</span> <span class="token operator">-</span>diff<span class="token punctuation">;</span>  <span class="token comment">// \u5F97\u5230\u6700\u53F3\u4E00\u4F4D</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> diff<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">else</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-\u7FFB\u8F6C\u4E00\u4E2A\u6570\u7684\u6BD4\u7279\u4F4D" tabindex="-1"><a class="header-anchor" href="#_5-\u7FFB\u8F6C\u4E00\u4E2A\u6570\u7684\u6BD4\u7279\u4F4D" aria-hidden="true">#</a> 5. \u7FFB\u8F6C\u4E00\u4E2A\u6570\u7684\u6BD4\u7279\u4F4D</h2><p>190. Reverse Bits (Easy)</p>`,6),N={href:"https://leetcode.com/problems/reverse-bits/description/",target:"_blank",rel:"noopener noreferrer"},S=s("Leetcode"),T=s(" / "),P={href:"https://leetcode-cn.com/problems/reverse-bits/description/",target:"_blank",rel:"noopener noreferrer"},M=s("\u529B\u6263"),V=t(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ret <span class="token operator">|=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u8BE5\u51FD\u6570\u9700\u8981\u88AB\u8C03\u7528\u5F88\u591A\u6B21\uFF0C\u53EF\u4EE5\u5C06 int \u62C6\u6210 4 \u4E2A byte\uFF0C\u7136\u540E\u7F13\u5B58 byte \u5BF9\u5E94\u7684\u6BD4\u7279\u4F4D\u7FFB\u8F6C\uFF0C\u6700\u540E\u518D\u62FC\u63A5\u8D77\u6765\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        ret <span class="token operator">|=</span> <span class="token function">reverseByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0b11111111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">&gt;&gt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">reverseByte</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> t <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ret <span class="token operator">|=</span> t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        t <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-\u4E0D\u7528\u989D\u5916\u53D8\u91CF\u4EA4\u6362\u4E24\u4E2A\u6574\u6570" tabindex="-1"><a class="header-anchor" href="#_6-\u4E0D\u7528\u989D\u5916\u53D8\u91CF\u4EA4\u6362\u4E24\u4E2A\u6574\u6570" aria-hidden="true">#</a> 6. \u4E0D\u7528\u989D\u5916\u53D8\u91CF\u4EA4\u6362\u4E24\u4E2A\u6574\u6570</h2><p><a href="#">\u7A0B\u5E8F\u5458\u4EE3\u7801\u9762\u8BD5\u6307\u5357 \uFF1AP317</a></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-\u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F-2-\u7684-n-\u6B21\u65B9" tabindex="-1"><a class="header-anchor" href="#_7-\u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F-2-\u7684-n-\u6B21\u65B9" aria-hidden="true">#</a> 7. \u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F 2 \u7684 n \u6B21\u65B9</h2><p>231. Power of Two (Easy)</p>`,8),H={href:"https://leetcode.com/problems/power-of-two/description/",target:"_blank",rel:"noopener noreferrer"},J=s("Leetcode"),R=s(" / "),G={href:"https://leetcode-cn.com/problems/power-of-two/description/",target:"_blank",rel:"noopener noreferrer"},K=s("\u529B\u6263"),W=t(`<p>\u4E8C\u8FDB\u5236\u8868\u793A\u53EA\u6709\u4E00\u4E2A 1 \u5B58\u5728\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5229\u7528 1000 &amp; 0111 == 0 \u8FD9\u79CD\u6027\u8D28\uFF0C\u5F97\u5230\u4EE5\u4E0B\u89E3\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-\u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F-4-\u7684-n-\u6B21\u65B9" tabindex="-1"><a class="header-anchor" href="#_8-\u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F-4-\u7684-n-\u6B21\u65B9" aria-hidden="true">#</a> 8. \u5224\u65AD\u4E00\u4E2A\u6570\u662F\u4E0D\u662F 4 \u7684 n \u6B21\u65B9</h2><p>342. Power of Four (Easy)</p>`,6),Q={href:"https://leetcode.com/problems/power-of-four/",target:"_blank",rel:"noopener noreferrer"},U=s("Leetcode"),X=s(" / "),Y={href:"https://leetcode-cn.com/problems/power-of-four/",target:"_blank",rel:"noopener noreferrer"},Z=s("\u529B\u6263"),$=t(`<p>\u8FD9\u79CD\u6570\u5728\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D\u6709\u4E14\u53EA\u6709\u4E00\u4E2A\u5947\u6570\u4F4D\u4E3A 1\uFF0C\u4F8B\u5982 16\uFF0810000\uFF09\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">0b01010101010101010101010101010101</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E5F\u53EF\u4EE5\u4F7F\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u8FDB\u884C\u5339\u914D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;10*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-\u5224\u65AD\u4E00\u4E2A\u6570\u7684\u4F4D\u7EA7\u8868\u793A\u662F\u5426\u4E0D\u4F1A\u51FA\u73B0\u8FDE\u7EED\u7684-0-\u548C-1" tabindex="-1"><a class="header-anchor" href="#_9-\u5224\u65AD\u4E00\u4E2A\u6570\u7684\u4F4D\u7EA7\u8868\u793A\u662F\u5426\u4E0D\u4F1A\u51FA\u73B0\u8FDE\u7EED\u7684-0-\u548C-1" aria-hidden="true">#</a> 9. \u5224\u65AD\u4E00\u4E2A\u6570\u7684\u4F4D\u7EA7\u8868\u793A\u662F\u5426\u4E0D\u4F1A\u51FA\u73B0\u8FDE\u7EED\u7684 0 \u548C 1</h2><p>693. Binary Number with Alternating Bits (Easy)</p>`,6),nn={href:"https://leetcode.com/problems/binary-number-with-alternating-bits/description/",target:"_blank",rel:"noopener noreferrer"},sn=s("Leetcode"),an=s(" / "),en={href:"https://leetcode-cn.com/problems/binary-number-with-alternating-bits/description/",target:"_blank",rel:"noopener noreferrer"},tn=s("\u529B\u6263"),pn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: 10
Output: True
Explanation:
The binary representation of 10 is: 1010.

Input: 11
Output: False
Explanation:
The binary representation of 11 is: 1011.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E 1010 \u8FD9\u79CD\u4F4D\u7EA7\u8868\u793A\u7684\u6570\uFF0C\u628A\u5B83\u5411\u53F3\u79FB\u52A8 1 \u4F4D\u5F97\u5230 101\uFF0C\u8FD9\u4E24\u4E2A\u6570\u6BCF\u4E2A\u4F4D\u90FD\u4E0D\u540C\uFF0C\u56E0\u6B64\u5F02\u6216\u5F97\u5230\u7684\u7ED3\u679C\u4E3A 1111\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAlternatingBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-\u6C42\u4E00\u4E2A\u6570\u7684\u8865\u7801" tabindex="-1"><a class="header-anchor" href="#_10-\u6C42\u4E00\u4E2A\u6570\u7684\u8865\u7801" aria-hidden="true">#</a> 10. \u6C42\u4E00\u4E2A\u6570\u7684\u8865\u7801</h2><p>476. Number Complement (Easy)</p>`,5),on={href:"https://leetcode.com/problems/number-complement/description/",target:"_blank",rel:"noopener noreferrer"},cn=s("Leetcode"),ln=s(" / "),rn={href:"https://leetcode-cn.com/problems/number-complement/description/",target:"_blank",rel:"noopener noreferrer"},un=s("\u529B\u6263"),dn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u4E0D\u8003\u8651\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D\u7684\u9996 0 \u90E8\u5206\u3002</p><p>\u5BF9\u4E8E 00000101\uFF0C\u8981\u6C42\u8865\u7801\u53EF\u4EE5\u5C06\u5B83\u4E0E 00000111 \u8FDB\u884C\u5F02\u6216\u64CD\u4F5C\u3002\u90A3\u4E48\u95EE\u9898\u5C31\u8F6C\u6362\u4E3A\u6C42\u63A9\u7801 00000111\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> mask <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    mask <span class="token operator">=</span> <span class="token punctuation">(</span>mask <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num <span class="token operator">^</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u5229\u7528 Java \u7684 Integer.highestOneBit() \u65B9\u6CD5\u6765\u83B7\u5F97\u542B\u6709\u9996 1 \u7684\u6570\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">highestOneBit</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mask <span class="token operator">=</span> <span class="token punctuation">(</span>mask <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num <span class="token operator">^</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E 10000000 \u8FD9\u6837\u7684\u6570\u8981\u6269\u5C55\u6210 11111111\uFF0C\u53EF\u4EE5\u5229\u7528\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>mask |= mask &gt;&gt; 1    11000000
mask |= mask &gt;&gt; 2    11110000
mask |= mask &gt;&gt; 4    11111111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mask <span class="token operator">=</span> num<span class="token punctuation">;</span>
    mask <span class="token operator">|=</span> mask <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    mask <span class="token operator">|=</span> mask <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    mask <span class="token operator">|=</span> mask <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    mask <span class="token operator">|=</span> mask <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    mask <span class="token operator">|=</span> mask <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>mask <span class="token operator">^</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-\u5B9E\u73B0\u6574\u6570\u7684\u52A0\u6CD5" tabindex="-1"><a class="header-anchor" href="#_11-\u5B9E\u73B0\u6574\u6570\u7684\u52A0\u6CD5" aria-hidden="true">#</a> 11. \u5B9E\u73B0\u6574\u6570\u7684\u52A0\u6CD5</h2><p>371. Sum of Two Integers (Easy)</p>`,11),kn={href:"https://leetcode.com/problems/sum-of-two-integers/description/",target:"_blank",rel:"noopener noreferrer"},mn=s("Leetcode"),vn=s(" / "),bn={href:"https://leetcode-cn.com/problems/sum-of-two-integers/description/",target:"_blank",rel:"noopener noreferrer"},hn=s("\u529B\u6263"),gn=t(`<p>a ^ b \u8868\u793A\u6CA1\u6709\u8003\u8651\u8FDB\u4F4D\u7684\u60C5\u51B5\u4E0B\u4E24\u6570\u7684\u548C\uFF0C(a &amp; b) &lt;&lt; 1 \u5C31\u662F\u8FDB\u4F4D\u3002</p><p>\u9012\u5F52\u4F1A\u7EC8\u6B62\u7684\u539F\u56E0\u662F (a &amp; b) &lt;&lt; 1 \u6700\u53F3\u8FB9\u4F1A\u591A\u4E00\u4E2A 0\uFF0C\u90A3\u4E48\u7EE7\u7EED\u9012\u5F52\uFF0C\u8FDB\u4F4D\u6700\u53F3\u8FB9\u7684 0 \u4F1A\u6162\u6162\u589E\u591A\uFF0C\u6700\u540E\u8FDB\u4F4D\u4F1A\u53D8\u4E3A 0\uFF0C\u9012\u5F52\u7EC8\u6B62\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-\u5B57\u7B26\u4E32\u6570\u7EC4\u6700\u5927\u4E58\u79EF" tabindex="-1"><a class="header-anchor" href="#_12-\u5B57\u7B26\u4E32\u6570\u7EC4\u6700\u5927\u4E58\u79EF" aria-hidden="true">#</a> 12. \u5B57\u7B26\u4E32\u6570\u7EC4\u6700\u5927\u4E58\u79EF</h2><p>318. Maximum Product of Word Lengths (Medium)</p>`,5),_n={href:"https://leetcode.com/problems/maximum-product-of-word-lengths/description/",target:"_blank",rel:"noopener noreferrer"},wn=s("Leetcode"),En=s(" / "),fn={href:"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/description/",target:"_blank",rel:"noopener noreferrer"},yn=s("\u529B\u6263"),xn=t(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Given [&quot;abcw&quot;, &quot;baz&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;xtfn&quot;, &quot;abcdef&quot;]
Return 16
The two words can be &quot;abcw&quot;, &quot;xtfn&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9898\u76EE\u63CF\u8FF0\uFF1A\u5B57\u7B26\u4E32\u6570\u7EC4\u7684\u5B57\u7B26\u4E32\u53EA\u542B\u6709\u5C0F\u5199\u5B57\u7B26\u3002\u6C42\u89E3\u5B57\u7B26\u4E32\u6570\u7EC4\u4E2D\u4E24\u4E2A\u5B57\u7B26\u4E32\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF\uFF0C\u8981\u6C42\u8FD9\u4E24\u4E2A\u5B57\u7B26\u4E32\u4E0D\u80FD\u542B\u6709\u76F8\u540C\u5B57\u7B26\u3002</p><p>\u672C\u9898\u4E3B\u8981\u95EE\u9898\u662F\u5224\u65AD\u4E24\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u542B\u76F8\u540C\u5B57\u7B26\uFF0C\u7531\u4E8E\u5B57\u7B26\u4E32\u53EA\u542B\u6709\u5C0F\u5199\u5B57\u7B26\uFF0C\u603B\u5171 26 \u4F4D\uFF0C\u56E0\u6B64\u53EF\u4EE5\u7528\u4E00\u4E2A 32 \u4F4D\u7684\u6574\u6570\u6765\u5B58\u50A8\u6BCF\u4E2A\u5B57\u7B26\u662F\u5426\u51FA\u73B0\u8FC7\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ret <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-\u7EDF\u8BA1\u4ECE-0-n-\u6BCF\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D-1-\u7684\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#_13-\u7EDF\u8BA1\u4ECE-0-n-\u6BCF\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D-1-\u7684\u4E2A\u6570" aria-hidden="true">#</a> 13. \u7EDF\u8BA1\u4ECE 0 ~ n \u6BCF\u4E2A\u6570\u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D 1 \u7684\u4E2A\u6570</h2><p>338. Counting Bits (Medium)</p>`,6),Bn={href:"https://leetcode.com/problems/counting-bits/description/",target:"_blank",rel:"noopener noreferrer"},An=s("Leetcode"),jn=s(" / "),Dn={href:"https://leetcode-cn.com/problems/counting-bits/description/",target:"_blank",rel:"noopener noreferrer"},Fn=s("\u529B\u6263"),Cn=t(`<p>\u5BF9\u4E8E\u6570\u5B57 6(110)\uFF0C\u5B83\u53EF\u4EE5\u770B\u6210\u662F 4(100) \u518D\u52A0\u4E00\u4E2A 2(10)\uFF0C\u56E0\u6B64 dp[i] = dp[i&amp;(i-1)] + 1;</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function In(Ln,qn){const a=o("ExternalLinkIcon");return c(),i(l,null,[u,n("p",null,[n("a",d,[k,e(a)]),m,n("a",v,[b,e(a)])]),h,n("p",null,[n("a",g,[_,e(a)]),w,n("a",E,[f,e(a)])]),y,n("p",null,[n("a",x,[B,e(a)]),A,n("a",j,[D,e(a)])]),F,n("p",null,[n("a",C,[I,e(a)]),L,n("a",q,[z,e(a)])]),O,n("p",null,[n("a",N,[S,e(a)]),T,n("a",P,[M,e(a)])]),V,n("p",null,[n("a",H,[J,e(a)]),R,n("a",G,[K,e(a)])]),W,n("p",null,[n("a",Q,[U,e(a)]),X,n("a",Y,[Z,e(a)])]),$,n("p",null,[n("a",nn,[sn,e(a)]),an,n("a",en,[tn,e(a)])]),pn,n("p",null,[n("a",on,[cn,e(a)]),ln,n("a",rn,[un,e(a)])]),dn,n("p",null,[n("a",kn,[mn,e(a)]),vn,n("a",bn,[hn,e(a)])]),gn,n("p",null,[n("a",_n,[wn,e(a)]),En,n("a",fn,[yn,e(a)])]),xn,n("p",null,[n("a",Bn,[An,e(a)]),jn,n("a",Dn,[Fn,e(a)])]),Cn],64)}var Nn=p(r,[["render",In],["__file","Leetcode \u9898\u89E3 - \u4F4D\u8FD0\u7B97.html.vue"]]);export{Nn as default};
